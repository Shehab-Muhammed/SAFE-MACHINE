
SAFE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  00000f2e  00000fc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800138  00800138  0000109a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  000017f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010b7  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005bb  00000000  00000000  000029a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000847  00000000  00000000  00002f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  000037ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000350  00000000  00000000  000039e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d89  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 33       	cpi	r26, 0x38	; 56
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a8 e3       	ldi	r26, 0x38	; 56
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 33       	cpi	r26, 0x3F	; 63
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 04 	call	0x988	; 0x988 <main>
  8a:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SET_PIN_DIRECTION>:
#include "DIO_FUNC.h"
/*______________________________________________________________________________________________________________________*/ //1----> DIO_SET_PIN_DIRECTION
void DIO_SET_PIN_DIRECTION(uint_8 port,uint_8 pin,uint_8 dir)
{
	if((pin>=0)&&(pin<=7))
  92:	68 30       	cpi	r22, 0x08	; 8
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_SET_PIN_DIRECTION+0x6>
  96:	90 c0       	rjmp	.+288    	; 0x1b8 <DIO_SET_PIN_DIRECTION+0x126>
	{
				switch(port)
  98:	84 34       	cpi	r24, 0x44	; 68
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_SET_PIN_DIRECTION+0xc>
  9c:	71 c0       	rjmp	.+226    	; 0x180 <DIO_SET_PIN_DIRECTION+0xee>
  9e:	85 34       	cpi	r24, 0x45	; 69
  a0:	48 f4       	brcc	.+18     	; 0xb4 <DIO_SET_PIN_DIRECTION+0x22>
  a2:	82 34       	cpi	r24, 0x42	; 66
  a4:	99 f1       	breq	.+102    	; 0x10c <DIO_SET_PIN_DIRECTION+0x7a>
  a6:	83 34       	cpi	r24, 0x43	; 67
  a8:	08 f0       	brcs	.+2      	; 0xac <DIO_SET_PIN_DIRECTION+0x1a>
  aa:	4d c0       	rjmp	.+154    	; 0x146 <DIO_SET_PIN_DIRECTION+0xb4>
  ac:	81 34       	cpi	r24, 0x41	; 65
  ae:	09 f0       	breq	.+2      	; 0xb2 <DIO_SET_PIN_DIRECTION+0x20>
  b0:	83 c0       	rjmp	.+262    	; 0x1b8 <DIO_SET_PIN_DIRECTION+0x126>
  b2:	0f c0       	rjmp	.+30     	; 0xd2 <DIO_SET_PIN_DIRECTION+0x40>
  b4:	82 36       	cpi	r24, 0x62	; 98
  b6:	51 f1       	breq	.+84     	; 0x10c <DIO_SET_PIN_DIRECTION+0x7a>
  b8:	83 36       	cpi	r24, 0x63	; 99
  ba:	20 f4       	brcc	.+8      	; 0xc4 <DIO_SET_PIN_DIRECTION+0x32>
  bc:	81 36       	cpi	r24, 0x61	; 97
  be:	09 f0       	breq	.+2      	; 0xc2 <DIO_SET_PIN_DIRECTION+0x30>
  c0:	7b c0       	rjmp	.+246    	; 0x1b8 <DIO_SET_PIN_DIRECTION+0x126>
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <DIO_SET_PIN_DIRECTION+0x40>
  c4:	83 36       	cpi	r24, 0x63	; 99
  c6:	09 f4       	brne	.+2      	; 0xca <DIO_SET_PIN_DIRECTION+0x38>
  c8:	3e c0       	rjmp	.+124    	; 0x146 <DIO_SET_PIN_DIRECTION+0xb4>
  ca:	84 36       	cpi	r24, 0x64	; 100
  cc:	09 f0       	breq	.+2      	; 0xd0 <DIO_SET_PIN_DIRECTION+0x3e>
  ce:	74 c0       	rjmp	.+232    	; 0x1b8 <DIO_SET_PIN_DIRECTION+0x126>
  d0:	57 c0       	rjmp	.+174    	; 0x180 <DIO_SET_PIN_DIRECTION+0xee>

				{
					/*________________________________________________*/
					case'A':
					case'a':
					if (dir==1)
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	69 f4       	brne	.+26     	; 0xf0 <DIO_SET_PIN_DIRECTION+0x5e>
					{
						SET_BIT(DDRA,pin);
  d6:	2a b3       	in	r18, 0x1a	; 26
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SET_PIN_DIRECTION+0x52>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SET_PIN_DIRECTION+0x4e>
  e8:	ba 01       	movw	r22, r20
  ea:	62 2b       	or	r22, r18
  ec:	6a bb       	out	0x1a, r22	; 26
  ee:	08 95       	ret
					}
					else                           //DDRA
					{
						CLEAR_BIT(DDRA,pin);
  f0:	2a b3       	in	r18, 0x1a	; 26
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	ac 01       	movw	r20, r24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_SET_PIN_DIRECTION+0x6c>
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_SET_PIN_DIRECTION+0x68>
 102:	ba 01       	movw	r22, r20
 104:	60 95       	com	r22
 106:	62 23       	and	r22, r18
 108:	6a bb       	out	0x1a, r22	; 26
 10a:	08 95       	ret
					}
					break;
					/*________________________________________________*/
					case'B':
					case'b':
					if(dir==1)
 10c:	41 30       	cpi	r20, 0x01	; 1
 10e:	69 f4       	brne	.+26     	; 0x12a <DIO_SET_PIN_DIRECTION+0x98>
					{
						SET_BIT(DDRB,pin);
 110:	27 b3       	in	r18, 0x17	; 23
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	ac 01       	movw	r20, r24
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_SET_PIN_DIRECTION+0x8c>
 11a:	44 0f       	add	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_SET_PIN_DIRECTION+0x88>
 122:	ba 01       	movw	r22, r20
 124:	62 2b       	or	r22, r18
 126:	67 bb       	out	0x17, r22	; 23
 128:	08 95       	ret
					}
					else                            //DDRB
					{
						CLEAR_BIT(DDRB,pin);
 12a:	27 b3       	in	r18, 0x17	; 23
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	ac 01       	movw	r20, r24
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SET_PIN_DIRECTION+0xa6>
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SET_PIN_DIRECTION+0xa2>
 13c:	ba 01       	movw	r22, r20
 13e:	60 95       	com	r22
 140:	62 23       	and	r22, r18
 142:	67 bb       	out	0x17, r22	; 23
 144:	08 95       	ret
					}
					break;
					/*________________________________________________*/
					case'C':
					case'c':
					if(dir==1)
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	69 f4       	brne	.+26     	; 0x164 <DIO_SET_PIN_DIRECTION+0xd2>
					{
						SET_BIT(DDRC,pin);
 14a:	24 b3       	in	r18, 0x14	; 20
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	ac 01       	movw	r20, r24
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SET_PIN_DIRECTION+0xc6>
 154:	44 0f       	add	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SET_PIN_DIRECTION+0xc2>
 15c:	ba 01       	movw	r22, r20
 15e:	62 2b       	or	r22, r18
 160:	64 bb       	out	0x14, r22	; 20
 162:	08 95       	ret
					}
					else                            //DDRC
					{
						CLEAR_BIT(DDRC,pin);
 164:	24 b3       	in	r18, 0x14	; 20
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	ac 01       	movw	r20, r24
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SET_PIN_DIRECTION+0xe0>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SET_PIN_DIRECTION+0xdc>
 176:	ba 01       	movw	r22, r20
 178:	60 95       	com	r22
 17a:	62 23       	and	r22, r18
 17c:	64 bb       	out	0x14, r22	; 20
 17e:	08 95       	ret
					}
					break;
					/*________________________________________________*/
					case'D':
					case'd':
					if(dir==1)
 180:	41 30       	cpi	r20, 0x01	; 1
 182:	69 f4       	brne	.+26     	; 0x19e <DIO_SET_PIN_DIRECTION+0x10c>
					{
						SET_BIT(DDRD,pin);
 184:	21 b3       	in	r18, 0x11	; 17
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	ac 01       	movw	r20, r24
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SET_PIN_DIRECTION+0x100>
 18e:	44 0f       	add	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SET_PIN_DIRECTION+0xfc>
 196:	ba 01       	movw	r22, r20
 198:	62 2b       	or	r22, r18
 19a:	61 bb       	out	0x11, r22	; 17
 19c:	08 95       	ret
					}
					else                              //DDRD
					{
						CLEAR_BIT(DDRD,pin);
 19e:	21 b3       	in	r18, 0x11	; 17
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	ac 01       	movw	r20, r24
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_SET_PIN_DIRECTION+0x11a>
 1a8:	44 0f       	add	r20, r20
 1aa:	55 1f       	adc	r21, r21
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_SET_PIN_DIRECTION+0x116>
 1b0:	ba 01       	movw	r22, r20
 1b2:	60 95       	com	r22
 1b4:	62 23       	and	r22, r18
 1b6:	61 bb       	out	0x11, r22	; 17
 1b8:	08 95       	ret

000001ba <DIO_PORT_PIN_WRITE>:
}
/*______________________________________________________________________________________________________________________*/ //2----> DIO_PORT_PIN_WRITE
void DIO_PORT_PIN_WRITE(uint_8 port,uint_8 pin,uint_8 val)
{
	
	if((pin>=0)&&(pin<=7))
 1ba:	68 30       	cpi	r22, 0x08	; 8
 1bc:	08 f0       	brcs	.+2      	; 0x1c0 <DIO_PORT_PIN_WRITE+0x6>
 1be:	90 c0       	rjmp	.+288    	; 0x2e0 <DIO_PORT_PIN_WRITE+0x126>
	
	{		
				switch(port)
 1c0:	84 34       	cpi	r24, 0x44	; 68
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <DIO_PORT_PIN_WRITE+0xc>
 1c4:	71 c0       	rjmp	.+226    	; 0x2a8 <DIO_PORT_PIN_WRITE+0xee>
 1c6:	85 34       	cpi	r24, 0x45	; 69
 1c8:	48 f4       	brcc	.+18     	; 0x1dc <DIO_PORT_PIN_WRITE+0x22>
 1ca:	82 34       	cpi	r24, 0x42	; 66
 1cc:	99 f1       	breq	.+102    	; 0x234 <DIO_PORT_PIN_WRITE+0x7a>
 1ce:	83 34       	cpi	r24, 0x43	; 67
 1d0:	08 f0       	brcs	.+2      	; 0x1d4 <DIO_PORT_PIN_WRITE+0x1a>
 1d2:	4d c0       	rjmp	.+154    	; 0x26e <DIO_PORT_PIN_WRITE+0xb4>
 1d4:	81 34       	cpi	r24, 0x41	; 65
 1d6:	09 f0       	breq	.+2      	; 0x1da <DIO_PORT_PIN_WRITE+0x20>
 1d8:	83 c0       	rjmp	.+262    	; 0x2e0 <DIO_PORT_PIN_WRITE+0x126>
 1da:	0f c0       	rjmp	.+30     	; 0x1fa <DIO_PORT_PIN_WRITE+0x40>
 1dc:	82 36       	cpi	r24, 0x62	; 98
 1de:	51 f1       	breq	.+84     	; 0x234 <DIO_PORT_PIN_WRITE+0x7a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	20 f4       	brcc	.+8      	; 0x1ec <DIO_PORT_PIN_WRITE+0x32>
 1e4:	81 36       	cpi	r24, 0x61	; 97
 1e6:	09 f0       	breq	.+2      	; 0x1ea <DIO_PORT_PIN_WRITE+0x30>
 1e8:	7b c0       	rjmp	.+246    	; 0x2e0 <DIO_PORT_PIN_WRITE+0x126>
 1ea:	07 c0       	rjmp	.+14     	; 0x1fa <DIO_PORT_PIN_WRITE+0x40>
 1ec:	83 36       	cpi	r24, 0x63	; 99
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <DIO_PORT_PIN_WRITE+0x38>
 1f0:	3e c0       	rjmp	.+124    	; 0x26e <DIO_PORT_PIN_WRITE+0xb4>
 1f2:	84 36       	cpi	r24, 0x64	; 100
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <DIO_PORT_PIN_WRITE+0x3e>
 1f6:	74 c0       	rjmp	.+232    	; 0x2e0 <DIO_PORT_PIN_WRITE+0x126>
 1f8:	57 c0       	rjmp	.+174    	; 0x2a8 <DIO_PORT_PIN_WRITE+0xee>
		
					{
						/*_____________________________________________*/				
						case 'A':
						case 'a':
						if(val==1)
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	69 f4       	brne	.+26     	; 0x218 <DIO_PORT_PIN_WRITE+0x5e>
						{
							SET_BIT(PORTA,pin);
 1fe:	2b b3       	in	r18, 0x1b	; 27
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	ac 01       	movw	r20, r24
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_PORT_PIN_WRITE+0x52>
 208:	44 0f       	add	r20, r20
 20a:	55 1f       	adc	r21, r21
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_PORT_PIN_WRITE+0x4e>
 210:	ba 01       	movw	r22, r20
 212:	62 2b       	or	r22, r18
 214:	6b bb       	out	0x1b, r22	; 27
 216:	08 95       	ret
						}												//PORTA
						else
						{
							CLEAR_BIT(PORTA,pin);
 218:	2b b3       	in	r18, 0x1b	; 27
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	ac 01       	movw	r20, r24
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_PORT_PIN_WRITE+0x6c>
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_PORT_PIN_WRITE+0x68>
 22a:	ba 01       	movw	r22, r20
 22c:	60 95       	com	r22
 22e:	62 23       	and	r22, r18
 230:	6b bb       	out	0x1b, r22	; 27
 232:	08 95       	ret
						}
						break;
						/*_____________________________________________*/					
						case 'B':
						case 'b':
						if(val==1)
 234:	41 30       	cpi	r20, 0x01	; 1
 236:	69 f4       	brne	.+26     	; 0x252 <DIO_PORT_PIN_WRITE+0x98>
						{
							SET_BIT(PORTB,pin);
 238:	28 b3       	in	r18, 0x18	; 24
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	ac 01       	movw	r20, r24
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_PORT_PIN_WRITE+0x8c>
 242:	44 0f       	add	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_PORT_PIN_WRITE+0x88>
 24a:	ba 01       	movw	r22, r20
 24c:	62 2b       	or	r22, r18
 24e:	68 bb       	out	0x18, r22	; 24
 250:	08 95       	ret
						}												//PORTB
						else
						{
							CLEAR_BIT(PORTB,pin);
 252:	28 b3       	in	r18, 0x18	; 24
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	ac 01       	movw	r20, r24
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_PORT_PIN_WRITE+0xa6>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_PORT_PIN_WRITE+0xa2>
 264:	ba 01       	movw	r22, r20
 266:	60 95       	com	r22
 268:	62 23       	and	r22, r18
 26a:	68 bb       	out	0x18, r22	; 24
 26c:	08 95       	ret
						}
						break;
						/*_____________________________________________*/				
						case 'C':
						case 'c':
						if(val==1)
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	69 f4       	brne	.+26     	; 0x28c <DIO_PORT_PIN_WRITE+0xd2>
						{
							SET_BIT(PORTC,pin);
 272:	25 b3       	in	r18, 0x15	; 21
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	ac 01       	movw	r20, r24
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_PORT_PIN_WRITE+0xc6>
 27c:	44 0f       	add	r20, r20
 27e:	55 1f       	adc	r21, r21
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_PORT_PIN_WRITE+0xc2>
 284:	ba 01       	movw	r22, r20
 286:	62 2b       	or	r22, r18
 288:	65 bb       	out	0x15, r22	; 21
 28a:	08 95       	ret
						}												//PORTC
						else
						{
							CLEAR_BIT(PORTC,pin);
 28c:	25 b3       	in	r18, 0x15	; 21
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ac 01       	movw	r20, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_PORT_PIN_WRITE+0xe0>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_PORT_PIN_WRITE+0xdc>
 29e:	ba 01       	movw	r22, r20
 2a0:	60 95       	com	r22
 2a2:	62 23       	and	r22, r18
 2a4:	65 bb       	out	0x15, r22	; 21
 2a6:	08 95       	ret
						}
						break;	
						/*_____________________________________________*/
						case 'D':
						case 'd':
						if(val==1)
 2a8:	41 30       	cpi	r20, 0x01	; 1
 2aa:	69 f4       	brne	.+26     	; 0x2c6 <DIO_PORT_PIN_WRITE+0x10c>
						{
							SET_BIT(PORTD,pin);
 2ac:	22 b3       	in	r18, 0x12	; 18
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	ac 01       	movw	r20, r24
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_PORT_PIN_WRITE+0x100>
 2b6:	44 0f       	add	r20, r20
 2b8:	55 1f       	adc	r21, r21
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_PORT_PIN_WRITE+0xfc>
 2be:	ba 01       	movw	r22, r20
 2c0:	62 2b       	or	r22, r18
 2c2:	62 bb       	out	0x12, r22	; 18
 2c4:	08 95       	ret
						}												//PORTD
						else
						{
							CLEAR_BIT(PORTD,pin);
 2c6:	22 b3       	in	r18, 0x12	; 18
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_PORT_PIN_WRITE+0x11a>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_PORT_PIN_WRITE+0x116>
 2d8:	ba 01       	movw	r22, r20
 2da:	60 95       	com	r22
 2dc:	62 23       	and	r22, r18
 2de:	62 bb       	out	0x12, r22	; 18
 2e0:	08 95       	ret

000002e2 <DIO_TOGGLE_PORT_PIN>:
	}			
}
/*______________________________________________________________________________________________________________________*/ //3----> DIO_TOGGLE_PORT_PIN
void DIO_TOGGLE_PORT_PIN(uint_8 port,uint_8 pin)
{
		if((pin>=0)&&(pin<=7))
 2e2:	68 30       	cpi	r22, 0x08	; 8
 2e4:	08 f0       	brcs	.+2      	; 0x2e8 <DIO_TOGGLE_PORT_PIN+0x6>
 2e6:	4c c0       	rjmp	.+152    	; 0x380 <DIO_TOGGLE_PORT_PIN+0x9e>
		
		{
				switch(port)
 2e8:	84 34       	cpi	r24, 0x44	; 68
 2ea:	09 f4       	brne	.+2      	; 0x2ee <DIO_TOGGLE_PORT_PIN+0xc>
 2ec:	3d c0       	rjmp	.+122    	; 0x368 <DIO_TOGGLE_PORT_PIN+0x86>
 2ee:	85 34       	cpi	r24, 0x45	; 69
 2f0:	40 f4       	brcc	.+16     	; 0x302 <DIO_TOGGLE_PORT_PIN+0x20>
 2f2:	82 34       	cpi	r24, 0x42	; 66
 2f4:	f9 f0       	breq	.+62     	; 0x334 <DIO_TOGGLE_PORT_PIN+0x52>
 2f6:	83 34       	cpi	r24, 0x43	; 67
 2f8:	50 f5       	brcc	.+84     	; 0x34e <DIO_TOGGLE_PORT_PIN+0x6c>
 2fa:	81 34       	cpi	r24, 0x41	; 65
 2fc:	09 f0       	breq	.+2      	; 0x300 <DIO_TOGGLE_PORT_PIN+0x1e>
 2fe:	40 c0       	rjmp	.+128    	; 0x380 <DIO_TOGGLE_PORT_PIN+0x9e>
 300:	0c c0       	rjmp	.+24     	; 0x31a <DIO_TOGGLE_PORT_PIN+0x38>
 302:	82 36       	cpi	r24, 0x62	; 98
 304:	b9 f0       	breq	.+46     	; 0x334 <DIO_TOGGLE_PORT_PIN+0x52>
 306:	83 36       	cpi	r24, 0x63	; 99
 308:	18 f4       	brcc	.+6      	; 0x310 <DIO_TOGGLE_PORT_PIN+0x2e>
 30a:	81 36       	cpi	r24, 0x61	; 97
 30c:	c9 f5       	brne	.+114    	; 0x380 <DIO_TOGGLE_PORT_PIN+0x9e>
 30e:	05 c0       	rjmp	.+10     	; 0x31a <DIO_TOGGLE_PORT_PIN+0x38>
 310:	83 36       	cpi	r24, 0x63	; 99
 312:	e9 f0       	breq	.+58     	; 0x34e <DIO_TOGGLE_PORT_PIN+0x6c>
 314:	84 36       	cpi	r24, 0x64	; 100
 316:	a1 f5       	brne	.+104    	; 0x380 <DIO_TOGGLE_PORT_PIN+0x9e>
 318:	27 c0       	rjmp	.+78     	; 0x368 <DIO_TOGGLE_PORT_PIN+0x86>
		
				{
					/*_____________________________________________*/
					case 'A':
					case 'a':
					TOGGLE_BIT(PORTA,pin);												//PORTA
 31a:	2b b3       	in	r18, 0x1b	; 27
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	ac 01       	movw	r20, r24
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_TOGGLE_PORT_PIN+0x46>
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_TOGGLE_PORT_PIN+0x42>
 32c:	ba 01       	movw	r22, r20
 32e:	62 27       	eor	r22, r18
 330:	6b bb       	out	0x1b, r22	; 27
					break;
 332:	08 95       	ret
					/*_____________________________________________*/
					case 'B':
					case 'b':
					TOGGLE_BIT(PORTB,pin);												//PORTB
 334:	28 b3       	in	r18, 0x18	; 24
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	ac 01       	movw	r20, r24
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_TOGGLE_PORT_PIN+0x60>
 33e:	44 0f       	add	r20, r20
 340:	55 1f       	adc	r21, r21
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_TOGGLE_PORT_PIN+0x5c>
 346:	ba 01       	movw	r22, r20
 348:	62 27       	eor	r22, r18
 34a:	68 bb       	out	0x18, r22	; 24
					break;
 34c:	08 95       	ret
					/*_____________________________________________*/
					case 'C':
					case 'c':
					TOGGLE_BIT(PORTC,pin);												//PORTC
 34e:	25 b3       	in	r18, 0x15	; 21
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	ac 01       	movw	r20, r24
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_TOGGLE_PORT_PIN+0x7a>
 358:	44 0f       	add	r20, r20
 35a:	55 1f       	adc	r21, r21
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_TOGGLE_PORT_PIN+0x76>
 360:	ba 01       	movw	r22, r20
 362:	62 27       	eor	r22, r18
 364:	65 bb       	out	0x15, r22	; 21
					break;
 366:	08 95       	ret
					/*_____________________________________________*/
					case 'D':
					case 'd':
					TOGGLE_BIT(PORTD,pin);												//PORTD
 368:	22 b3       	in	r18, 0x12	; 18
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	ac 01       	movw	r20, r24
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_TOGGLE_PORT_PIN+0x94>
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_TOGGLE_PORT_PIN+0x90>
 37a:	ba 01       	movw	r22, r20
 37c:	62 27       	eor	r22, r18
 37e:	62 bb       	out	0x12, r22	; 18
 380:	08 95       	ret

00000382 <DIO_PIN_READ>:
}
/*______________________________________________________________________________________________________________________*/ //4----> DIO_READ_PIN
uint_8 DIO_PIN_READ(uint_8 port,uint_8 pin)
{
		uint_8 pin_status=0;
		if((pin>=0)&&(pin<=7))
 382:	68 30       	cpi	r22, 0x08	; 8
 384:	08 f0       	brcs	.+2      	; 0x388 <DIO_PIN_READ+0x6>
 386:	3f c0       	rjmp	.+126    	; 0x406 <DIO_PIN_READ+0x84>
			
		{
				switch(port)
 388:	84 34       	cpi	r24, 0x44	; 68
 38a:	99 f1       	breq	.+102    	; 0x3f2 <DIO_PIN_READ+0x70>
 38c:	85 34       	cpi	r24, 0x45	; 69
 38e:	38 f4       	brcc	.+14     	; 0x39e <DIO_PIN_READ+0x1c>
 390:	82 34       	cpi	r24, 0x42	; 66
 392:	d9 f0       	breq	.+54     	; 0x3ca <DIO_PIN_READ+0x48>
 394:	83 34       	cpi	r24, 0x43	; 67
 396:	18 f5       	brcc	.+70     	; 0x3de <DIO_PIN_READ+0x5c>
 398:	81 34       	cpi	r24, 0x41	; 65
 39a:	b9 f5       	brne	.+110    	; 0x40a <DIO_PIN_READ+0x88>
 39c:	0c c0       	rjmp	.+24     	; 0x3b6 <DIO_PIN_READ+0x34>
 39e:	82 36       	cpi	r24, 0x62	; 98
 3a0:	a1 f0       	breq	.+40     	; 0x3ca <DIO_PIN_READ+0x48>
 3a2:	83 36       	cpi	r24, 0x63	; 99
 3a4:	18 f4       	brcc	.+6      	; 0x3ac <DIO_PIN_READ+0x2a>
 3a6:	81 36       	cpi	r24, 0x61	; 97
 3a8:	81 f5       	brne	.+96     	; 0x40a <DIO_PIN_READ+0x88>
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <DIO_PIN_READ+0x34>
 3ac:	83 36       	cpi	r24, 0x63	; 99
 3ae:	b9 f0       	breq	.+46     	; 0x3de <DIO_PIN_READ+0x5c>
 3b0:	84 36       	cpi	r24, 0x64	; 100
 3b2:	59 f5       	brne	.+86     	; 0x40a <DIO_PIN_READ+0x88>
 3b4:	1e c0       	rjmp	.+60     	; 0x3f2 <DIO_PIN_READ+0x70>
				
				{
					/*_____________________________________________*/
					case 'A':
					case 'a':
					pin_status=READ_BIT(PINA,pin);													//PORTA
 3b6:	29 b3       	in	r18, 0x19	; 25
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	c9 01       	movw	r24, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_PIN_READ+0x40>
 3be:	95 95       	asr	r25
 3c0:	87 95       	ror	r24
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_PIN_READ+0x3c>
 3c6:	81 70       	andi	r24, 0x01	; 1
					break;
 3c8:	08 95       	ret
					/*_____________________________________________*/
					case 'B':
					case 'b':
					pin_status=READ_BIT(PINB,pin);													//PORTB
 3ca:	26 b3       	in	r18, 0x16	; 22
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	c9 01       	movw	r24, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_PIN_READ+0x54>
 3d2:	95 95       	asr	r25
 3d4:	87 95       	ror	r24
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_PIN_READ+0x50>
 3da:	81 70       	andi	r24, 0x01	; 1
					break;
 3dc:	08 95       	ret
					/*_____________________________________________*/
					case 'C':
					case 'c':
					pin_status=READ_BIT(PINC,pin);													//PORTC
 3de:	23 b3       	in	r18, 0x13	; 19
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	c9 01       	movw	r24, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_PIN_READ+0x68>
 3e6:	95 95       	asr	r25
 3e8:	87 95       	ror	r24
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_PIN_READ+0x64>
 3ee:	81 70       	andi	r24, 0x01	; 1
					break;
 3f0:	08 95       	ret
					/*_____________________________________________*/
					case 'D':
					case 'd':
					pin_status=READ_BIT(PIND,pin);													//PORTD
 3f2:	20 b3       	in	r18, 0x10	; 16
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	c9 01       	movw	r24, r18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_PIN_READ+0x7c>
 3fa:	95 95       	asr	r25
 3fc:	87 95       	ror	r24
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_PIN_READ+0x78>
 402:	81 70       	andi	r24, 0x01	; 1
					break;
 404:	08 95       	ret
		}
}
/*______________________________________________________________________________________________________________________*/ //4----> DIO_READ_PIN
uint_8 DIO_PIN_READ(uint_8 port,uint_8 pin)
{
		uint_8 pin_status=0;
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	08 95       	ret
 40a:	80 e0       	ldi	r24, 0x00	; 0
				}
				
		}
	
	return pin_status;
}
 40c:	08 95       	ret

0000040e <DIO_SET_PORT_DIRECTION>:
/*______________________________________________________________________________________________________________________*/ //5----> DIO_SET_PORT_DIRECTION
void DIO_SET_PORT_DIRECTION(uint_8 port,uint_8 dir)
	{
				switch(port)
 40e:	84 34       	cpi	r24, 0x44	; 68
 410:	d9 f0       	breq	.+54     	; 0x448 <DIO_SET_PORT_DIRECTION+0x3a>
 412:	85 34       	cpi	r24, 0x45	; 69
 414:	38 f4       	brcc	.+14     	; 0x424 <DIO_SET_PORT_DIRECTION+0x16>
 416:	82 34       	cpi	r24, 0x42	; 66
 418:	99 f0       	breq	.+38     	; 0x440 <DIO_SET_PORT_DIRECTION+0x32>
 41a:	83 34       	cpi	r24, 0x43	; 67
 41c:	98 f4       	brcc	.+38     	; 0x444 <DIO_SET_PORT_DIRECTION+0x36>
 41e:	81 34       	cpi	r24, 0x41	; 65
 420:	a1 f4       	brne	.+40     	; 0x44a <DIO_SET_PORT_DIRECTION+0x3c>
 422:	0c c0       	rjmp	.+24     	; 0x43c <DIO_SET_PORT_DIRECTION+0x2e>
 424:	82 36       	cpi	r24, 0x62	; 98
 426:	61 f0       	breq	.+24     	; 0x440 <DIO_SET_PORT_DIRECTION+0x32>
 428:	83 36       	cpi	r24, 0x63	; 99
 42a:	18 f4       	brcc	.+6      	; 0x432 <DIO_SET_PORT_DIRECTION+0x24>
 42c:	81 36       	cpi	r24, 0x61	; 97
 42e:	69 f4       	brne	.+26     	; 0x44a <DIO_SET_PORT_DIRECTION+0x3c>
 430:	05 c0       	rjmp	.+10     	; 0x43c <DIO_SET_PORT_DIRECTION+0x2e>
 432:	83 36       	cpi	r24, 0x63	; 99
 434:	39 f0       	breq	.+14     	; 0x444 <DIO_SET_PORT_DIRECTION+0x36>
 436:	84 36       	cpi	r24, 0x64	; 100
 438:	41 f4       	brne	.+16     	; 0x44a <DIO_SET_PORT_DIRECTION+0x3c>
 43a:	06 c0       	rjmp	.+12     	; 0x448 <DIO_SET_PORT_DIRECTION+0x3a>

				{
					/*________________________________________________*/
					case'A':
					case'a':	
					DDRA=dir;											//DDRA
 43c:	6a bb       	out	0x1a, r22	; 26
					break;
 43e:	08 95       	ret
					/*________________________________________________*/
					case'B':
					case'b':
					DDRB=dir;											//DDRB
 440:	67 bb       	out	0x17, r22	; 23
					break;
 442:	08 95       	ret
					/*________________________________________________*/
					case'C':
					case'c':
					DDRC=dir;											//DDRC
 444:	64 bb       	out	0x14, r22	; 20
					break;
 446:	08 95       	ret
					/*________________________________________________*/
					case'D':
					case'd':
					DDRD=dir;											//DDRD
 448:	61 bb       	out	0x11, r22	; 17
 44a:	08 95       	ret

0000044c <DIO_PORT_WRITE>:
	}
/*______________________________________________________________________________________________________________________*/ //6----> DIO_PORT_WRITE

void DIO_PORT_WRITE(uint_8 port,uint_8 val)
	{
			switch(port)
 44c:	84 34       	cpi	r24, 0x44	; 68
 44e:	d9 f0       	breq	.+54     	; 0x486 <DIO_PORT_WRITE+0x3a>
 450:	85 34       	cpi	r24, 0x45	; 69
 452:	38 f4       	brcc	.+14     	; 0x462 <DIO_PORT_WRITE+0x16>
 454:	82 34       	cpi	r24, 0x42	; 66
 456:	99 f0       	breq	.+38     	; 0x47e <DIO_PORT_WRITE+0x32>
 458:	83 34       	cpi	r24, 0x43	; 67
 45a:	98 f4       	brcc	.+38     	; 0x482 <DIO_PORT_WRITE+0x36>
 45c:	81 34       	cpi	r24, 0x41	; 65
 45e:	a1 f4       	brne	.+40     	; 0x488 <DIO_PORT_WRITE+0x3c>
 460:	0c c0       	rjmp	.+24     	; 0x47a <DIO_PORT_WRITE+0x2e>
 462:	82 36       	cpi	r24, 0x62	; 98
 464:	61 f0       	breq	.+24     	; 0x47e <DIO_PORT_WRITE+0x32>
 466:	83 36       	cpi	r24, 0x63	; 99
 468:	18 f4       	brcc	.+6      	; 0x470 <DIO_PORT_WRITE+0x24>
 46a:	81 36       	cpi	r24, 0x61	; 97
 46c:	69 f4       	brne	.+26     	; 0x488 <DIO_PORT_WRITE+0x3c>
 46e:	05 c0       	rjmp	.+10     	; 0x47a <DIO_PORT_WRITE+0x2e>
 470:	83 36       	cpi	r24, 0x63	; 99
 472:	39 f0       	breq	.+14     	; 0x482 <DIO_PORT_WRITE+0x36>
 474:	84 36       	cpi	r24, 0x64	; 100
 476:	41 f4       	brne	.+16     	; 0x488 <DIO_PORT_WRITE+0x3c>
 478:	06 c0       	rjmp	.+12     	; 0x486 <DIO_PORT_WRITE+0x3a>

			{
				/*________________________________________________*/
				case'A':
				case'a':
				PORTA=val;											//PORTA
 47a:	6b bb       	out	0x1b, r22	; 27
				break;
 47c:	08 95       	ret
				/*________________________________________________*/
				case'B':
				case'b':
				PORTB=val;											//PORTB
 47e:	68 bb       	out	0x18, r22	; 24
				break;
 480:	08 95       	ret
				/*________________________________________________*/
				case'C':
				case'c':
				PORTC=val;											//PORTC
 482:	65 bb       	out	0x15, r22	; 21
				break;
 484:	08 95       	ret
				/*________________________________________________*/
				case'D':
				case'd':
				PORTD=val;											//PORTD
 486:	62 bb       	out	0x12, r22	; 18
 488:	08 95       	ret

0000048a <DIO_READ_PORT>:
	}
/*______________________________________________________________________________________________________________________*/ //7----> DIO_READ_PORT
uint_8	DIO_READ_PORT(uint_8 port)
{
			uint_8 port_status;
			switch(port)
 48a:	84 34       	cpi	r24, 0x44	; 68
 48c:	d9 f0       	breq	.+54     	; 0x4c4 <DIO_READ_PORT+0x3a>
 48e:	85 34       	cpi	r24, 0x45	; 69
 490:	38 f4       	brcc	.+14     	; 0x4a0 <DIO_READ_PORT+0x16>
 492:	82 34       	cpi	r24, 0x42	; 66
 494:	99 f0       	breq	.+38     	; 0x4bc <DIO_READ_PORT+0x32>
 496:	83 34       	cpi	r24, 0x43	; 67
 498:	98 f4       	brcc	.+38     	; 0x4c0 <DIO_READ_PORT+0x36>
 49a:	81 34       	cpi	r24, 0x41	; 65
 49c:	a1 f4       	brne	.+40     	; 0x4c6 <DIO_READ_PORT+0x3c>
 49e:	0c c0       	rjmp	.+24     	; 0x4b8 <DIO_READ_PORT+0x2e>
 4a0:	82 36       	cpi	r24, 0x62	; 98
 4a2:	61 f0       	breq	.+24     	; 0x4bc <DIO_READ_PORT+0x32>
 4a4:	83 36       	cpi	r24, 0x63	; 99
 4a6:	18 f4       	brcc	.+6      	; 0x4ae <DIO_READ_PORT+0x24>
 4a8:	81 36       	cpi	r24, 0x61	; 97
 4aa:	69 f4       	brne	.+26     	; 0x4c6 <DIO_READ_PORT+0x3c>
 4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <DIO_READ_PORT+0x2e>
 4ae:	83 36       	cpi	r24, 0x63	; 99
 4b0:	39 f0       	breq	.+14     	; 0x4c0 <DIO_READ_PORT+0x36>
 4b2:	84 36       	cpi	r24, 0x64	; 100
 4b4:	41 f4       	brne	.+16     	; 0x4c6 <DIO_READ_PORT+0x3c>
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <DIO_READ_PORT+0x3a>
			{
				case'A':
				case'a':
				port_status=PINA;									//PORTA
 4b8:	99 b3       	in	r25, 0x19	; 25
				break;
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <DIO_READ_PORT+0x3c>
				/*________________________________________________*/
				case'B':
				case'b':
				port_status=PINB;									//PORTB
 4bc:	96 b3       	in	r25, 0x16	; 22
				break;
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <DIO_READ_PORT+0x3c>
				/*________________________________________________*/
				case'C':
				case'c':
				port_status=PINC;									//PORTC
 4c0:	93 b3       	in	r25, 0x13	; 19
				break;
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <DIO_READ_PORT+0x3c>
				/*________________________________________________*/
				case'D':
				case'd':
				port_status=PIND;									//PORTD
 4c4:	90 b3       	in	r25, 0x10	; 16
				break;
			}
	
	return port_status;	
	
}
 4c6:	89 2f       	mov	r24, r25
 4c8:	08 95       	ret

000004ca <DIO_TOGGLE_PORT>:
/*______________________________________________________________________________________________________________________*/ //8----> DIO_TOGGLE_PORT
void	DIO_TOGGLE_PORT			(uint_8 port)
{
			switch(port)
 4ca:	84 34       	cpi	r24, 0x44	; 68
 4cc:	09 f1       	breq	.+66     	; 0x510 <DIO_TOGGLE_PORT+0x46>
 4ce:	85 34       	cpi	r24, 0x45	; 69
 4d0:	38 f4       	brcc	.+14     	; 0x4e0 <DIO_TOGGLE_PORT+0x16>
 4d2:	82 34       	cpi	r24, 0x42	; 66
 4d4:	a9 f0       	breq	.+42     	; 0x500 <DIO_TOGGLE_PORT+0x36>
 4d6:	83 34       	cpi	r24, 0x43	; 67
 4d8:	b8 f4       	brcc	.+46     	; 0x508 <DIO_TOGGLE_PORT+0x3e>
 4da:	81 34       	cpi	r24, 0x41	; 65
 4dc:	e1 f4       	brne	.+56     	; 0x516 <DIO_TOGGLE_PORT+0x4c>
 4de:	0c c0       	rjmp	.+24     	; 0x4f8 <DIO_TOGGLE_PORT+0x2e>
 4e0:	82 36       	cpi	r24, 0x62	; 98
 4e2:	71 f0       	breq	.+28     	; 0x500 <DIO_TOGGLE_PORT+0x36>
 4e4:	83 36       	cpi	r24, 0x63	; 99
 4e6:	18 f4       	brcc	.+6      	; 0x4ee <DIO_TOGGLE_PORT+0x24>
 4e8:	81 36       	cpi	r24, 0x61	; 97
 4ea:	a9 f4       	brne	.+42     	; 0x516 <DIO_TOGGLE_PORT+0x4c>
 4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <DIO_TOGGLE_PORT+0x2e>
 4ee:	83 36       	cpi	r24, 0x63	; 99
 4f0:	59 f0       	breq	.+22     	; 0x508 <DIO_TOGGLE_PORT+0x3e>
 4f2:	84 36       	cpi	r24, 0x64	; 100
 4f4:	81 f4       	brne	.+32     	; 0x516 <DIO_TOGGLE_PORT+0x4c>
 4f6:	0c c0       	rjmp	.+24     	; 0x510 <DIO_TOGGLE_PORT+0x46>
			{
				case'A':
				case'a':
				PORTA=~PORTA;										//PORTA
 4f8:	8b b3       	in	r24, 0x1b	; 27
 4fa:	80 95       	com	r24
 4fc:	8b bb       	out	0x1b, r24	; 27
				break;
 4fe:	08 95       	ret
				/*________________________________________________*/
				case'B':
				case'b':
				PORTB^=0xff;										//PORTB
 500:	88 b3       	in	r24, 0x18	; 24
 502:	80 95       	com	r24
 504:	88 bb       	out	0x18, r24	; 24
				break;
 506:	08 95       	ret
				/*________________________________________________*/
				case'C':
				case'c':
				PORTC^=0xff;										//PORTC
 508:	85 b3       	in	r24, 0x15	; 21
 50a:	80 95       	com	r24
 50c:	85 bb       	out	0x15, r24	; 21
				break;
 50e:	08 95       	ret
				/*________________________________________________*/
				case'D':
				case'd':
				PORTD^=0xff;										//PORTD
 510:	82 b3       	in	r24, 0x12	; 18
 512:	80 95       	com	r24
 514:	82 bb       	out	0x12, r24	; 18
 516:	08 95       	ret

00000518 <DIO_WRITE_ON_HIGH_NIPPLE>:
			}
			
}
void DIO_WRITE_ON_HIGH_NIPPLE(uint_8 portname,uint_8 val)
{
	val<<=4;
 518:	62 95       	swap	r22
 51a:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 51c:	84 34       	cpi	r24, 0x44	; 68
 51e:	51 f1       	breq	.+84     	; 0x574 <DIO_WRITE_ON_HIGH_NIPPLE+0x5c>
 520:	85 34       	cpi	r24, 0x45	; 69
 522:	38 f4       	brcc	.+14     	; 0x532 <DIO_WRITE_ON_HIGH_NIPPLE+0x1a>
 524:	82 34       	cpi	r24, 0x42	; 66
 526:	c1 f0       	breq	.+48     	; 0x558 <DIO_WRITE_ON_HIGH_NIPPLE+0x40>
 528:	83 34       	cpi	r24, 0x43	; 67
 52a:	e8 f4       	brcc	.+58     	; 0x566 <DIO_WRITE_ON_HIGH_NIPPLE+0x4e>
 52c:	81 34       	cpi	r24, 0x41	; 65
 52e:	41 f5       	brne	.+80     	; 0x580 <DIO_WRITE_ON_HIGH_NIPPLE+0x68>
 530:	0c c0       	rjmp	.+24     	; 0x54a <DIO_WRITE_ON_HIGH_NIPPLE+0x32>
 532:	82 36       	cpi	r24, 0x62	; 98
 534:	89 f0       	breq	.+34     	; 0x558 <DIO_WRITE_ON_HIGH_NIPPLE+0x40>
 536:	83 36       	cpi	r24, 0x63	; 99
 538:	18 f4       	brcc	.+6      	; 0x540 <DIO_WRITE_ON_HIGH_NIPPLE+0x28>
 53a:	81 36       	cpi	r24, 0x61	; 97
 53c:	09 f5       	brne	.+66     	; 0x580 <DIO_WRITE_ON_HIGH_NIPPLE+0x68>
 53e:	05 c0       	rjmp	.+10     	; 0x54a <DIO_WRITE_ON_HIGH_NIPPLE+0x32>
 540:	83 36       	cpi	r24, 0x63	; 99
 542:	89 f0       	breq	.+34     	; 0x566 <DIO_WRITE_ON_HIGH_NIPPLE+0x4e>
 544:	84 36       	cpi	r24, 0x64	; 100
 546:	e1 f4       	brne	.+56     	; 0x580 <DIO_WRITE_ON_HIGH_NIPPLE+0x68>
 548:	15 c0       	rjmp	.+42     	; 0x574 <DIO_WRITE_ON_HIGH_NIPPLE+0x5c>
	{
		case 'A':
		case 'a':
		PORTA&=0x0f;
 54a:	8b b3       	in	r24, 0x1b	; 27
 54c:	8f 70       	andi	r24, 0x0F	; 15
 54e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=val;
 550:	8b b3       	in	r24, 0x1b	; 27
 552:	68 2b       	or	r22, r24
 554:	6b bb       	out	0x1b, r22	; 27
		break;
 556:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB&=0x0f;
 558:	88 b3       	in	r24, 0x18	; 24
 55a:	8f 70       	andi	r24, 0x0F	; 15
 55c:	88 bb       	out	0x18, r24	; 24
		PORTB|=val;
 55e:	88 b3       	in	r24, 0x18	; 24
 560:	68 2b       	or	r22, r24
 562:	68 bb       	out	0x18, r22	; 24
		break;
 564:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC&=0x0f;
 566:	85 b3       	in	r24, 0x15	; 21
 568:	8f 70       	andi	r24, 0x0F	; 15
 56a:	85 bb       	out	0x15, r24	; 21
		PORTC|=val;
 56c:	85 b3       	in	r24, 0x15	; 21
 56e:	68 2b       	or	r22, r24
 570:	65 bb       	out	0x15, r22	; 21
		break;
 572:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD&=0x0f;
 574:	82 b3       	in	r24, 0x12	; 18
 576:	8f 70       	andi	r24, 0x0F	; 15
 578:	82 bb       	out	0x12, r24	; 18
		PORTD|=val;
 57a:	82 b3       	in	r24, 0x12	; 18
 57c:	68 2b       	or	r22, r24
 57e:	62 bb       	out	0x12, r22	; 18
 580:	08 95       	ret

00000582 <DIO_WRITE_ON_LOW_NIPPLE>:
		break;
	}
}
void DIO_WRITE_ON_LOW_NIPPLE(uint_8 portname,uint_8 val)
{
	val&=0x0f;
 582:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 584:	84 34       	cpi	r24, 0x44	; 68
 586:	51 f1       	breq	.+84     	; 0x5dc <DIO_WRITE_ON_LOW_NIPPLE+0x5a>
 588:	85 34       	cpi	r24, 0x45	; 69
 58a:	38 f4       	brcc	.+14     	; 0x59a <DIO_WRITE_ON_LOW_NIPPLE+0x18>
 58c:	82 34       	cpi	r24, 0x42	; 66
 58e:	c1 f0       	breq	.+48     	; 0x5c0 <DIO_WRITE_ON_LOW_NIPPLE+0x3e>
 590:	83 34       	cpi	r24, 0x43	; 67
 592:	e8 f4       	brcc	.+58     	; 0x5ce <DIO_WRITE_ON_LOW_NIPPLE+0x4c>
 594:	81 34       	cpi	r24, 0x41	; 65
 596:	41 f5       	brne	.+80     	; 0x5e8 <DIO_WRITE_ON_LOW_NIPPLE+0x66>
 598:	0c c0       	rjmp	.+24     	; 0x5b2 <DIO_WRITE_ON_LOW_NIPPLE+0x30>
 59a:	82 36       	cpi	r24, 0x62	; 98
 59c:	89 f0       	breq	.+34     	; 0x5c0 <DIO_WRITE_ON_LOW_NIPPLE+0x3e>
 59e:	83 36       	cpi	r24, 0x63	; 99
 5a0:	18 f4       	brcc	.+6      	; 0x5a8 <DIO_WRITE_ON_LOW_NIPPLE+0x26>
 5a2:	81 36       	cpi	r24, 0x61	; 97
 5a4:	09 f5       	brne	.+66     	; 0x5e8 <DIO_WRITE_ON_LOW_NIPPLE+0x66>
 5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <DIO_WRITE_ON_LOW_NIPPLE+0x30>
 5a8:	83 36       	cpi	r24, 0x63	; 99
 5aa:	89 f0       	breq	.+34     	; 0x5ce <DIO_WRITE_ON_LOW_NIPPLE+0x4c>
 5ac:	84 36       	cpi	r24, 0x64	; 100
 5ae:	e1 f4       	brne	.+56     	; 0x5e8 <DIO_WRITE_ON_LOW_NIPPLE+0x66>
 5b0:	15 c0       	rjmp	.+42     	; 0x5dc <DIO_WRITE_ON_LOW_NIPPLE+0x5a>
	{
		case 'A':
		case 'a':
		PORTA&=0xf0;
 5b2:	8b b3       	in	r24, 0x1b	; 27
 5b4:	80 7f       	andi	r24, 0xF0	; 240
 5b6:	8b bb       	out	0x1b, r24	; 27
		PORTA|=val;
 5b8:	8b b3       	in	r24, 0x1b	; 27
 5ba:	68 2b       	or	r22, r24
 5bc:	6b bb       	out	0x1b, r22	; 27
		break;
 5be:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB&=0xf0;
 5c0:	88 b3       	in	r24, 0x18	; 24
 5c2:	80 7f       	andi	r24, 0xF0	; 240
 5c4:	88 bb       	out	0x18, r24	; 24
		PORTB|=val;
 5c6:	88 b3       	in	r24, 0x18	; 24
 5c8:	68 2b       	or	r22, r24
 5ca:	68 bb       	out	0x18, r22	; 24
		break;
 5cc:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC&=0xf0;
 5ce:	85 b3       	in	r24, 0x15	; 21
 5d0:	80 7f       	andi	r24, 0xF0	; 240
 5d2:	85 bb       	out	0x15, r24	; 21
		PORTC|=val;
 5d4:	85 b3       	in	r24, 0x15	; 21
 5d6:	68 2b       	or	r22, r24
 5d8:	65 bb       	out	0x15, r22	; 21
		break ;
 5da:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD&=0xf0;
 5dc:	82 b3       	in	r24, 0x12	; 18
 5de:	80 7f       	andi	r24, 0xF0	; 240
 5e0:	82 bb       	out	0x12, r24	; 18
		PORTD|=val;
 5e2:	82 b3       	in	r24, 0x12	; 18
 5e4:	68 2b       	or	r22, r24
 5e6:	62 bb       	out	0x12, r22	; 18
 5e8:	08 95       	ret

000005ea <DIO_CONNECT_PULL_UP>:

/*___________________________________________________________________________PULL_UP_____________________________________________________________*/

void DIO_CONNECT_PULL_UP(uint_8 port,uint_8 pin,uint_8 state)
{
	DIO_PORT_PIN_WRITE(port,pin,state);
 5ea:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
}
 5ee:	08 95       	ret

000005f0 <EEPROM_WRITE>:
/*__________________________________________________________________________________________________________________________________*/


void EEPROM_WRITE(uint_16 address,uint_8 data)
{
	EERL=(uint_8)address;
 5f0:	8e bb       	out	0x1e, r24	; 30
	EERH=(uint_8)(address>>8);
 5f2:	9f bb       	out	0x1f, r25	; 31
	EEAR=address;
 5f4:	9f bb       	out	0x1f, r25	; 31
 5f6:	8e bb       	out	0x1e, r24	; 30
/*__________________________________________________ADDRESS_STORED_______________________________________*/

	EEDR=data;
 5f8:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
 5fa:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
 5fc:	e1 9a       	sbi	0x1c, 1	; 28
	
/*__________________________________________________CONTROL_SIGNAL_WRITE_________________________________*/


	while(READ_BIT(EECR,EEWE)==1);
 5fe:	8c b3       	in	r24, 0x1c	; 28
 600:	81 fd       	sbrc	r24, 1
 602:	fd cf       	rjmp	.-6      	; 0x5fe <EEPROM_WRITE+0xe>
	
/*__________________________________________________SURE_WRITE_FINISHED__________________________________*/
}
 604:	08 95       	ret

00000606 <EEPROM_READ>:
/*_________________________________________________________________________________________________________________________________*/


uint_8 EEPROM_READ (uint_16 address)
{
	EERL=(uint_8)address;
 606:	8e bb       	out	0x1e, r24	; 30
	EERH=(uint_8)(address>>8);	
 608:	9f bb       	out	0x1f, r25	; 31
	EEAR=address;
 60a:	9f bb       	out	0x1f, r25	; 31
 60c:	8e bb       	out	0x1e, r24	; 30
/*__________________________________________________ADDRESS_STORED______________________________________*/

	SET_BIT(EECR,EERE);
 60e:	e0 9a       	sbi	0x1c, 0	; 28
	
/*__________________________________________________CONTROL_SIGNAL_READ_________________________________*/
	
	return EEDR;
 610:	8d b3       	in	r24, 0x1d	; 29
/*__________________________________________________ADDRESS_DATA_RETURNED_______________________________*/

}
 612:	08 95       	ret

00000614 <BUTTON_READ_STATE>:
/*_________________________________________________*///BUTTON_READ///*_________________________________________________*/

uint_8	BUTTON_READ_STATE	(uint_8 port, uint_8 pin)
{
	uint_8 state;
	state = DIO_PIN_READ(port,pin);
 614:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_PIN_READ>
	return state;
}
 618:	08 95       	ret

0000061a <KEYPAD_INIT>:
/*_________________________________________________*///KEYPAD_INIT///*_________________________________________________*/
/*_________________________________________________*///KEYPAD_INIT///*_________________________________________________*/

void KEYPAD_INIT(void)
{
	DIO_SET_PORT_DIRECTION(KEYPAD_PORT,0x0f);
 61a:	84 e6       	ldi	r24, 0x64	; 100
 61c:	6f e0       	ldi	r22, 0x0F	; 15
 61e:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_SET_PORT_DIRECTION>
	DIO_CONNECT_PULL_UP(KEYPAD_PORT,4,PULL_UP_ENABLE);
 622:	84 e6       	ldi	r24, 0x64	; 100
 624:	64 e0       	ldi	r22, 0x04	; 4
 626:	41 e0       	ldi	r20, 0x01	; 1
 628:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_CONNECT_PULL_UP>
	DIO_CONNECT_PULL_UP(KEYPAD_PORT,5,PULL_UP_ENABLE);
 62c:	84 e6       	ldi	r24, 0x64	; 100
 62e:	65 e0       	ldi	r22, 0x05	; 5
 630:	41 e0       	ldi	r20, 0x01	; 1
 632:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_CONNECT_PULL_UP>
	DIO_CONNECT_PULL_UP(KEYPAD_PORT,6,PULL_UP_ENABLE);
 636:	84 e6       	ldi	r24, 0x64	; 100
 638:	66 e0       	ldi	r22, 0x06	; 6
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_CONNECT_PULL_UP>
	DIO_CONNECT_PULL_UP(KEYPAD_PORT,7,PULL_UP_ENABLE);
 640:	84 e6       	ldi	r24, 0x64	; 100
 642:	67 e0       	ldi	r22, 0x07	; 7
 644:	41 e0       	ldi	r20, 0x01	; 1
 646:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_CONNECT_PULL_UP>
}
 64a:	08 95       	ret

0000064c <KEYPAD_READ>:
/*_________________________________________________*///KEYPAD_READ///*_________________________________________________*/
/*_________________________________________________*///KEYPAD_READ///*_________________________________________________*/


uint_8 KEYPAD_READ(void)
{
 64c:	ef 92       	push	r14
 64e:	ff 92       	push	r15
 650:	1f 93       	push	r17
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
 65a:	60 97       	sbiw	r28, 0x10	; 16
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	f8 94       	cli
 660:	de bf       	out	0x3e, r29	; 62
 662:	0f be       	out	0x3f, r0	; 63
 664:	cd bf       	out	0x3d, r28	; 61
		uint_8 row,column,val=NOT_PRESSED;
		uint_8 arr[4][4]={{'1','2','3','+'},{'4','5','6','-'},{'7','8','9','/'},{'*','0','%','='}};
 666:	de 01       	movw	r26, r28
 668:	11 96       	adiw	r26, 0x01	; 1
 66a:	e0 e6       	ldi	r30, 0x60	; 96
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 e1       	ldi	r24, 0x10	; 16
 670:	01 90       	ld	r0, Z+
 672:	0d 92       	st	X+, r0
 674:	81 50       	subi	r24, 0x01	; 1
 676:	e1 f7       	brne	.-8      	; 0x670 <KEYPAD_READ+0x24>
 678:	ee 24       	eor	r14, r14
 67a:	ff 24       	eor	r15, r15
		for(row=0;row<=3;row++)
		{
			DIO_PORT_PIN_WRITE(KEYPAD_PORT,0,PIN_HIGH);		//*********************************************************//
 67c:	84 e6       	ldi	r24, 0x64	; 100
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	41 e0       	ldi	r20, 0x01	; 1
 682:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
			DIO_PORT_PIN_WRITE(KEYPAD_PORT,1,PIN_HIGH);		//*********************************************************//
 686:	84 e6       	ldi	r24, 0x64	; 100
 688:	61 e0       	ldi	r22, 0x01	; 1
 68a:	41 e0       	ldi	r20, 0x01	; 1
 68c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
			DIO_PORT_PIN_WRITE(KEYPAD_PORT,2,PIN_HIGH);		//****************KEYPAD_CONTROLLED_PINS*******************//
 690:	84 e6       	ldi	r24, 0x64	; 100
 692:	62 e0       	ldi	r22, 0x02	; 2
 694:	41 e0       	ldi	r20, 0x01	; 1
 696:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
			DIO_PORT_PIN_WRITE(KEYPAD_PORT,3,PIN_HIGH);		//*********************************************************//
 69a:	84 e6       	ldi	r24, 0x64	; 100
 69c:	63 e0       	ldi	r22, 0x03	; 3
 69e:	41 e0       	ldi	r20, 0x01	; 1
 6a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
			DIO_PORT_PIN_WRITE(KEYPAD_PORT,row,PIN_LOW);	//********************************************************//
 6a4:	84 e6       	ldi	r24, 0x64	; 100
 6a6:	6e 2d       	mov	r22, r14
 6a8:	40 e0       	ldi	r20, 0x00	; 0
 6aa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
			
				for(column=0;column<=3;column++)
 6ae:	10 e0       	ldi	r17, 0x00	; 0
				{
					if(BUTTON_READ_STATE(KEYPAD_PORT,column+4)==0) //----> CHECK_INPUT_STATE	
 6b0:	61 2f       	mov	r22, r17
 6b2:	6c 5f       	subi	r22, 0xFC	; 252
 6b4:	84 e6       	ldi	r24, 0x64	; 100
 6b6:	0e 94 0a 03 	call	0x614	; 0x614 <BUTTON_READ_STATE>
 6ba:	88 23       	and	r24, r24
 6bc:	89 f4       	brne	.+34     	; 0x6e0 <KEYPAD_READ+0x94>
					{
						val=arr[row][column];
 6be:	f7 01       	movw	r30, r14
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	ee 0f       	add	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	e1 0f       	add	r30, r17
 6ca:	f1 1d       	adc	r31, r1
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	8c 0f       	add	r24, r28
 6d2:	9d 1f       	adc	r25, r29
 6d4:	e8 0f       	add	r30, r24
 6d6:	f9 1f       	adc	r31, r25
 6d8:	80 81       	ld	r24, Z
						break;
					}	
				}
			if(val!=NOT_PRESSED)
 6da:	8f 3f       	cpi	r24, 0xFF	; 255
 6dc:	21 f0       	breq	.+8      	; 0x6e6 <KEYPAD_READ+0x9a>
 6de:	0b c0       	rjmp	.+22     	; 0x6f6 <KEYPAD_READ+0xaa>
			DIO_PORT_PIN_WRITE(KEYPAD_PORT,1,PIN_HIGH);		//*********************************************************//
			DIO_PORT_PIN_WRITE(KEYPAD_PORT,2,PIN_HIGH);		//****************KEYPAD_CONTROLLED_PINS*******************//
			DIO_PORT_PIN_WRITE(KEYPAD_PORT,3,PIN_HIGH);		//*********************************************************//
			DIO_PORT_PIN_WRITE(KEYPAD_PORT,row,PIN_LOW);	//********************************************************//
			
				for(column=0;column<=3;column++)
 6e0:	1f 5f       	subi	r17, 0xFF	; 255
 6e2:	14 30       	cpi	r17, 0x04	; 4
 6e4:	29 f7       	brne	.-54     	; 0x6b0 <KEYPAD_READ+0x64>
 6e6:	08 94       	sec
 6e8:	e1 1c       	adc	r14, r1
 6ea:	f1 1c       	adc	r15, r1

uint_8 KEYPAD_READ(void)
{
		uint_8 row,column,val=NOT_PRESSED;
		uint_8 arr[4][4]={{'1','2','3','+'},{'4','5','6','-'},{'7','8','9','/'},{'*','0','%','='}};
		for(row=0;row<=3;row++)
 6ec:	94 e0       	ldi	r25, 0x04	; 4
 6ee:	e9 16       	cp	r14, r25
 6f0:	f1 04       	cpc	r15, r1
 6f2:	21 f6       	brne	.-120    	; 0x67c <KEYPAD_READ+0x30>
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
			
		}
		return val;
}
 6f6:	60 96       	adiw	r28, 0x10	; 16
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	f8 94       	cli
 6fc:	de bf       	out	0x3e, r29	; 62
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	cd bf       	out	0x3d, r28	; 61
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	1f 91       	pop	r17
 708:	ff 90       	pop	r15
 70a:	ef 90       	pop	r14
 70c:	08 95       	ret

0000070e <KEYPAD_PRESSED_NUM>:


uint_8		KEYPAD_PRESSED_NUM		(void)
{
	uint_8 num;
	num = KEYPAD_READ();
 70e:	0e 94 26 03 	call	0x64c	; 0x64c <KEYPAD_READ>
	if(num!=NOT_PRESSED)
 712:	8f 3f       	cpi	r24, 0xFF	; 255
 714:	11 f0       	breq	.+4      	; 0x71a <KEYPAD_PRESSED_NUM+0xc>
	{
		return num-48;
 716:	80 53       	subi	r24, 0x30	; 48
 718:	08 95       	ret
	}
	
}
 71a:	08 95       	ret

0000071c <ENABLE_PULSE>:
/*___________________________________________________________________ENABLE_PULSE_________________________________________________________________*/
/*___________________________________________________________________ENABLE_PULSE_________________________________________________________________*/

 static void ENABLE_PULSE(void)
{
	DIO_SET_PIN_DIRECTION	(LCD_CONTROL_PORT,EN_PIN,PIN_OUTPUT);
 71c:	82 e4       	ldi	r24, 0x42	; 66
 71e:	62 e0       	ldi	r22, 0x02	; 2
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>
	DIO_PORT_PIN_WRITE		(LCD_CONTROL_PORT,EN_PIN,LOW);
 726:	82 e4       	ldi	r24, 0x42	; 66
 728:	62 e0       	ldi	r22, 0x02	; 2
 72a:	40 e0       	ldi	r20, 0x00	; 0
 72c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 730:	8f e9       	ldi	r24, 0x9F	; 159
 732:	9f e0       	ldi	r25, 0x0F	; 15
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	f1 f7       	brne	.-4      	; 0x734 <ENABLE_PULSE+0x18>
 738:	00 c0       	rjmp	.+0      	; 0x73a <ENABLE_PULSE+0x1e>
 73a:	00 00       	nop
	_delay_ms(2);
	DIO_PORT_PIN_WRITE		(LCD_CONTROL_PORT,EN_PIN,HIGH);
 73c:	82 e4       	ldi	r24, 0x42	; 66
 73e:	62 e0       	ldi	r22, 0x02	; 2
 740:	41 e0       	ldi	r20, 0x01	; 1
 742:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
 746:	8f e1       	ldi	r24, 0x1F	; 31
 748:	9e e4       	ldi	r25, 0x4E	; 78
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <ENABLE_PULSE+0x2e>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <ENABLE_PULSE+0x34>
 750:	00 00       	nop
	_delay_ms(10);													  //----STATIC_AVOID_CALLING_FROM_APP_LAYER
	DIO_PORT_PIN_WRITE		(LCD_CONTROL_PORT,EN_PIN,LOW);
 752:	82 e4       	ldi	r24, 0x42	; 66
 754:	62 e0       	ldi	r22, 0x02	; 2
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
 75c:	8f e0       	ldi	r24, 0x0F	; 15
 75e:	97 e2       	ldi	r25, 0x27	; 39
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <ENABLE_PULSE+0x44>
 764:	00 c0       	rjmp	.+0      	; 0x766 <ENABLE_PULSE+0x4a>
 766:	00 00       	nop
	_delay_ms(5);
	
}
 768:	08 95       	ret

0000076a <LCD_SEND_CMD_FOUR_BIT>:
/*___________________________________________________________________SEND_4_BIT_CMD______________________________________________________________*/
/*___________________________________________________________________SEND_4_BIT_CMD______________________________________________________________*/
/*___________________________________________________________________SEND_4_BIT_CMD______________________________________________________________*/
#if defined		LCD_4_BIT_FUNC
void LCD_SEND_CMD_FOUR_BIT(uint_8 CMD,uint_8 NIPPLE)
{
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	d8 2f       	mov	r29, r24
 770:	c6 2f       	mov	r28, r22

	
	DIO_PORT_PIN_WRITE(LCD_CONTROL_PORT,RS_PIN,LOW);	//-------------->CMD_MODE
 772:	82 e4       	ldi	r24, 0x42	; 66
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
	
	DIO_PORT_PIN_WRITE(LCD_CONTROL_PORT,RW_PIN,LOW);	//-------------->WRITE_MODE
 77c:	82 e4       	ldi	r24, 0x42	; 66
 77e:	61 e0       	ldi	r22, 0x01	; 1
 780:	40 e0       	ldi	r20, 0x00	; 0
 782:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
					switch(NIPPLE)
 786:	cc 23       	and	r28, r28
 788:	89 f0       	breq	.+34     	; 0x7ac <LCD_SEND_CMD_FOUR_BIT+0x42>
 78a:	c1 30       	cpi	r28, 0x01	; 1
 78c:	e9 f4       	brne	.+58     	; 0x7c8 <LCD_SEND_CMD_FOUR_BIT+0x5e>
					{
					case HIGH_NIPPLE :
					DIO_WRITE_ON_HIGH_NIPPLE(LCD_PORT,(CMD>>4));//-------------------------------------------->TAKE_MOST_NIPPLES_CMD
 78e:	6d 2f       	mov	r22, r29
 790:	62 95       	swap	r22
 792:	6f 70       	andi	r22, 0x0F	; 15
 794:	81 e4       	ldi	r24, 0x41	; 65
 796:	0e 94 8c 02 	call	0x518	; 0x518 <DIO_WRITE_ON_HIGH_NIPPLE>

					ENABLE_PULSE();//----------------------------------------------------------->ENABLE_PULSE
 79a:	0e 94 8e 03 	call	0x71c	; 0x71c <ENABLE_PULSE>
	
					DIO_WRITE_ON_HIGH_NIPPLE(LCD_PORT,CMD);//-------------------------------------------->TAKE_LEAST_NIPPLES_DATA
 79e:	81 e4       	ldi	r24, 0x41	; 65
 7a0:	6d 2f       	mov	r22, r29
 7a2:	0e 94 8c 02 	call	0x518	; 0x518 <DIO_WRITE_ON_HIGH_NIPPLE>
	
					ENABLE_PULSE();//----------------------------------------------------------->ENABLE_PULSE
 7a6:	0e 94 8e 03 	call	0x71c	; 0x71c <ENABLE_PULSE>
					break;
 7aa:	0e c0       	rjmp	.+28     	; 0x7c8 <LCD_SEND_CMD_FOUR_BIT+0x5e>
					case LOW_NIPPLE :
					DIO_WRITE_ON_LOW_NIPPLE(LCD_PORT,(CMD>>4));//-------------------------------------------->TAKE_MOST_NIPPLES_CMD
 7ac:	6d 2f       	mov	r22, r29
 7ae:	62 95       	swap	r22
 7b0:	6f 70       	andi	r22, 0x0F	; 15
 7b2:	81 e4       	ldi	r24, 0x41	; 65
 7b4:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_WRITE_ON_LOW_NIPPLE>

					ENABLE_PULSE();//----------------------------------------------------------->ENABLE_PULSE
 7b8:	0e 94 8e 03 	call	0x71c	; 0x71c <ENABLE_PULSE>
					
					DIO_WRITE_ON_LOW_NIPPLE(LCD_PORT,CMD);//-------------------------------------------->TAKE_LEAST_NIPPLES_DATA
 7bc:	81 e4       	ldi	r24, 0x41	; 65
 7be:	6d 2f       	mov	r22, r29
 7c0:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_WRITE_ON_LOW_NIPPLE>
					
					ENABLE_PULSE();//----------------------------------------------------------->ENABLE_PULSE
 7c4:	0e 94 8e 03 	call	0x71c	; 0x71c <ENABLE_PULSE>
					break;
					}					
}
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	08 95       	ret

000007ce <LCD_4_BIT_INIT>:
 7ce:	2f e7       	ldi	r18, 0x7F	; 127
 7d0:	38 e3       	ldi	r19, 0x38	; 56
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	21 50       	subi	r18, 0x01	; 1
 7d6:	30 40       	sbci	r19, 0x00	; 0
 7d8:	40 40       	sbci	r20, 0x00	; 0
 7da:	e1 f7       	brne	.-8      	; 0x7d4 <LCD_4_BIT_INIT+0x6>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <LCD_4_BIT_INIT+0x10>
 7de:	00 00       	nop
	
	_delay_ms(50);
	/*___________________________________________________________________________________________________*/

	//1--->//DATA PORT OUTPUT
	switch(NIPPLE)
 7e0:	88 23       	and	r24, r24
 7e2:	19 f0       	breq	.+6      	; 0x7ea <LCD_4_BIT_INIT+0x1c>
 7e4:	81 30       	cpi	r24, 0x01	; 1
 7e6:	51 f5       	brne	.+84     	; 0x83c <LCD_4_BIT_INIT+0x6e>
 7e8:	15 c0       	rjmp	.+42     	; 0x814 <LCD_4_BIT_INIT+0x46>
	{
		
		case LOW_NIPPLE :
		DIO_SET_PIN_DIRECTION(LCD_PORT,0,PIN_OUTPUT);
 7ea:	81 e4       	ldi	r24, 0x41	; 65
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	41 e0       	ldi	r20, 0x01	; 1
 7f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>
		DIO_SET_PIN_DIRECTION(LCD_PORT,1,PIN_OUTPUT);
 7f4:	81 e4       	ldi	r24, 0x41	; 65
 7f6:	61 e0       	ldi	r22, 0x01	; 1
 7f8:	41 e0       	ldi	r20, 0x01	; 1
 7fa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>
		DIO_SET_PIN_DIRECTION(LCD_PORT,2,PIN_OUTPUT);
 7fe:	81 e4       	ldi	r24, 0x41	; 65
 800:	62 e0       	ldi	r22, 0x02	; 2
 802:	41 e0       	ldi	r20, 0x01	; 1
 804:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>
		DIO_SET_PIN_DIRECTION(LCD_PORT,3,PIN_OUTPUT);
 808:	81 e4       	ldi	r24, 0x41	; 65
 80a:	63 e0       	ldi	r22, 0x03	; 3
 80c:	41 e0       	ldi	r20, 0x01	; 1
 80e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>
		break;
 812:	14 c0       	rjmp	.+40     	; 0x83c <LCD_4_BIT_INIT+0x6e>
		
		case HIGH_NIPPLE:
		DIO_SET_PIN_DIRECTION(LCD_PORT,4,PIN_OUTPUT);
 814:	81 e4       	ldi	r24, 0x41	; 65
 816:	64 e0       	ldi	r22, 0x04	; 4
 818:	41 e0       	ldi	r20, 0x01	; 1
 81a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>
		DIO_SET_PIN_DIRECTION(LCD_PORT,5,PIN_OUTPUT);
 81e:	81 e4       	ldi	r24, 0x41	; 65
 820:	65 e0       	ldi	r22, 0x05	; 5
 822:	41 e0       	ldi	r20, 0x01	; 1
 824:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>
		DIO_SET_PIN_DIRECTION(LCD_PORT,6,PIN_OUTPUT);
 828:	81 e4       	ldi	r24, 0x41	; 65
 82a:	66 e0       	ldi	r22, 0x06	; 6
 82c:	41 e0       	ldi	r20, 0x01	; 1
 82e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>
		DIO_SET_PIN_DIRECTION(LCD_PORT,7,PIN_OUTPUT);
 832:	81 e4       	ldi	r24, 0x41	; 65
 834:	67 e0       	ldi	r22, 0x07	; 7
 836:	41 e0       	ldi	r20, 0x01	; 1
 838:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>
	}
	/*_____________________________________________________LCD_NIPPLES_PORT_DIRECTION______________________*/


	//2--->//RW---> READ / ~WRITE------>( 1 , 0)
	DIO_SET_PIN_DIRECTION(LCD_CONTROL_PORT,RW_PIN,PIN_OUTPUT);
 83c:	82 e4       	ldi	r24, 0x42	; 66
 83e:	61 e0       	ldi	r22, 0x01	; 1
 840:	41 e0       	ldi	r20, 0x01	; 1
 842:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>


	//3--->//RS-REGISTER SELECT--> SEND ( COMMAND , DATA )--->( 0 , 1 )
	DIO_SET_PIN_DIRECTION(LCD_CONTROL_PORT,RS_PIN,PIN_OUTPUT);
 846:	82 e4       	ldi	r24, 0x42	; 66
 848:	60 e0       	ldi	r22, 0x00	; 0
 84a:	41 e0       	ldi	r20, 0x01	; 1
 84c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>


	//4--->//E---> ENABLE------>( 1 ,0 )
	DIO_SET_PIN_DIRECTION(LCD_CONTROL_PORT,EN_PIN,PIN_OUTPUT);
 850:	82 e4       	ldi	r24, 0x42	; 66
 852:	62 e0       	ldi	r22, 0x02	; 2
 854:	41 e0       	ldi	r20, 0x01	; 1
 856:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>


	/*_________________________________________________LCD_CTRL_PINS_DIRECTRION____________________________*/


	DIO_PORT_PIN_WRITE(LCD_CONTROL_PORT,RW_PIN,LOW);
 85a:	82 e4       	ldi	r24, 0x42	; 66
 85c:	61 e0       	ldi	r22, 0x01	; 1
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
	/*__________________________________________________WRITE_MODE_________________________________________*/
	

	LCD_SEND_CMD_FOUR_BIT(LCD_HOME,NIPPLE_MODE);
 864:	82 e0       	ldi	r24, 0x02	; 2
 866:	61 e0       	ldi	r22, 0x01	; 1
 868:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
 86c:	8f e1       	ldi	r24, 0x1F	; 31
 86e:	9e e4       	ldi	r25, 0x4E	; 78
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	f1 f7       	brne	.-4      	; 0x870 <__stack+0x11>
 874:	00 c0       	rjmp	.+0      	; 0x876 <__stack+0x17>
 876:	00 00       	nop
	_delay_ms(10);
	/*__________________________________________________ADDRESS_COUNTER_CLEAR_(0x02)_______________________*/
	
	LCD_SEND_CMD_FOUR_BIT(LCD_4_BIT_FUNC,NIPPLE_MODE);
 878:	88 e2       	ldi	r24, 0x28	; 40
 87a:	61 e0       	ldi	r22, 0x01	; 1
 87c:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
 880:	8f e0       	ldi	r24, 0x0F	; 15
 882:	97 e2       	ldi	r25, 0x27	; 39
 884:	01 97       	sbiw	r24, 0x01	; 1
 886:	f1 f7       	brne	.-4      	; 0x884 <__stack+0x25>
 888:	00 c0       	rjmp	.+0      	; 0x88a <__stack+0x2b>
 88a:	00 00       	nop
	_delay_ms(5);
	/*__________________________________________________4_BIT_MODE_(0x28)__________________________________*/

	
	LCD_SEND_CMD_FOUR_BIT(LCD_DSPLAY_ON_CURSOR_ON,NIPPLE_MODE);
 88c:	8c e0       	ldi	r24, 0x0C	; 12
 88e:	61 e0       	ldi	r22, 0x01	; 1
 890:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
 894:	8f e0       	ldi	r24, 0x0F	; 15
 896:	97 e2       	ldi	r25, 0x27	; 39
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	f1 f7       	brne	.-4      	; 0x898 <__stack+0x39>
 89c:	00 c0       	rjmp	.+0      	; 0x89e <__stack+0x3f>
 89e:	00 00       	nop
	_delay_ms(5);
	/*__________________________________________________DSIPLAY_CURSOR_LCD_(0x0C)__________________________*/

	LCD_SEND_CMD_FOUR_BIT(LCD_ClEAR,NIPPLE_MODE);
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	61 e0       	ldi	r22, 0x01	; 1
 8a4:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
 8a8:	8f e1       	ldi	r24, 0x1F	; 31
 8aa:	9e e4       	ldi	r25, 0x4E	; 78
 8ac:	01 97       	sbiw	r24, 0x01	; 1
 8ae:	f1 f7       	brne	.-4      	; 0x8ac <__stack+0x4d>
 8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <__stack+0x53>
 8b2:	00 00       	nop
	_delay_ms(10);
	/*__________________________________________________LCD_CLEAR_(0x01)___________________________________*/

	LCD_SEND_CMD_FOUR_BIT(LCD_ENTRY_MODE,NIPPLE_MODE);
 8b4:	86 e0       	ldi	r24, 0x06	; 6
 8b6:	61 e0       	ldi	r22, 0x01	; 1
 8b8:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
 8bc:	8f e0       	ldi	r24, 0x0F	; 15
 8be:	97 e2       	ldi	r25, 0x27	; 39
 8c0:	01 97       	sbiw	r24, 0x01	; 1
 8c2:	f1 f7       	brne	.-4      	; 0x8c0 <__stack+0x61>
 8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <__stack+0x67>
 8c6:	00 00       	nop
	_delay_ms(5);
	/*__________________________________________________LCD_ENTRY_MODE(0x06)_______________________________*/

}
 8c8:	08 95       	ret

000008ca <LCD_SEND_DATA_FOUR_BIT>:
/*___________________________________________________________________SEND_4_BIT_DATA______________________________________________________________*/
/*___________________________________________________________________SEND_4_BIT_DATA______________________________________________________________*/
/*___________________________________________________________________SEND_4_BIT_DATA______________________________________________________________*/
#if defined		LCD_4_BIT_FUNC
void LCD_SEND_DATA_FOUR_BIT(uint_8 DATA,uint_8 NIPPLE)
{
 8ca:	cf 93       	push	r28
 8cc:	df 93       	push	r29
 8ce:	d8 2f       	mov	r29, r24
 8d0:	c6 2f       	mov	r28, r22
	
	DIO_PORT_PIN_WRITE(LCD_CONTROL_PORT,RS_PIN,HIGH);	//-------------->DATA_MODE
 8d2:	82 e4       	ldi	r24, 0x42	; 66
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	41 e0       	ldi	r20, 0x01	; 1
 8d8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
	
	DIO_PORT_PIN_WRITE(LCD_CONTROL_PORT,RW_PIN,LOW);	//-------------->WRITE_MODE
 8dc:	82 e4       	ldi	r24, 0x42	; 66
 8de:	61 e0       	ldi	r22, 0x01	; 1
 8e0:	40 e0       	ldi	r20, 0x00	; 0
 8e2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
		switch(NIPPLE)
 8e6:	cc 23       	and	r28, r28
 8e8:	89 f0       	breq	.+34     	; 0x90c <LCD_SEND_DATA_FOUR_BIT+0x42>
 8ea:	c1 30       	cpi	r28, 0x01	; 1
 8ec:	e9 f4       	brne	.+58     	; 0x928 <LCD_SEND_DATA_FOUR_BIT+0x5e>
		{
			case HIGH_NIPPLE :
			DIO_WRITE_ON_HIGH_NIPPLE(LCD_PORT,(DATA>>4));//-------------------------------------------->TAKE_MOST_NIPPLES_CMD
 8ee:	6d 2f       	mov	r22, r29
 8f0:	62 95       	swap	r22
 8f2:	6f 70       	andi	r22, 0x0F	; 15
 8f4:	81 e4       	ldi	r24, 0x41	; 65
 8f6:	0e 94 8c 02 	call	0x518	; 0x518 <DIO_WRITE_ON_HIGH_NIPPLE>

			ENABLE_PULSE();//----------------------------------------------------------->ENABLE_PULSE
 8fa:	0e 94 8e 03 	call	0x71c	; 0x71c <ENABLE_PULSE>
		
			DIO_WRITE_ON_HIGH_NIPPLE(LCD_PORT,DATA);//-------------------------------------------->TAKE_LEAST_NIPPLES_DATA
 8fe:	81 e4       	ldi	r24, 0x41	; 65
 900:	6d 2f       	mov	r22, r29
 902:	0e 94 8c 02 	call	0x518	; 0x518 <DIO_WRITE_ON_HIGH_NIPPLE>
		
			ENABLE_PULSE();//----------------------------------------------------------->ENABLE_PULSE
 906:	0e 94 8e 03 	call	0x71c	; 0x71c <ENABLE_PULSE>
			break;
 90a:	0e c0       	rjmp	.+28     	; 0x928 <LCD_SEND_DATA_FOUR_BIT+0x5e>
			case LOW_NIPPLE :
			DIO_WRITE_ON_LOW_NIPPLE(LCD_PORT,(DATA>>4));//-------------------------------------------->TAKE_MOST_NIPPLES_CMD
 90c:	6d 2f       	mov	r22, r29
 90e:	62 95       	swap	r22
 910:	6f 70       	andi	r22, 0x0F	; 15
 912:	81 e4       	ldi	r24, 0x41	; 65
 914:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_WRITE_ON_LOW_NIPPLE>

			ENABLE_PULSE();//----------------------------------------------------------->ENABLE_PULSE
 918:	0e 94 8e 03 	call	0x71c	; 0x71c <ENABLE_PULSE>
		
			DIO_WRITE_ON_LOW_NIPPLE(LCD_PORT,DATA);//-------------------------------------------->TAKE_LEAST_NIPPLES_DATA
 91c:	81 e4       	ldi	r24, 0x41	; 65
 91e:	6d 2f       	mov	r22, r29
 920:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_WRITE_ON_LOW_NIPPLE>
		
			ENABLE_PULSE();//----------------------------------------------------------->ENABLE_PULSE
 924:	0e 94 8e 03 	call	0x71c	; 0x71c <ENABLE_PULSE>
			break;
		}

}
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	08 95       	ret

0000092e <LCD_WRITE_STRING_4_BIT>:
/*_______________________________________________________________LCD4_BIT_WRITE_STRING_____________________________________________________________*/
/*_______________________________________________________________LCD4_BIT_WRITE_STRING_____________________________________________________________*/
/*_______________________________________________________________LCD4_BIT_WRITE_STRING_____________________________________________________________*/
#if defined		LCD_4_BIT_FUNC
void LCD_WRITE_STRING_4_BIT(uint_8* STRING)
{
 92e:	cf 93       	push	r28
 930:	df 93       	push	r29
 932:	ec 01       	movw	r28, r24
	uint_8 i=0;
	while(STRING[i]!='\0')
 934:	88 81       	ld	r24, Y
 936:	88 23       	and	r24, r24
 938:	39 f0       	breq	.+14     	; 0x948 <LCD_WRITE_STRING_4_BIT+0x1a>
/*_______________________________________________________________LCD4_BIT_WRITE_STRING_____________________________________________________________*/
/*_______________________________________________________________LCD4_BIT_WRITE_STRING_____________________________________________________________*/
/*_______________________________________________________________LCD4_BIT_WRITE_STRING_____________________________________________________________*/
/*_______________________________________________________________LCD4_BIT_WRITE_STRING_____________________________________________________________*/
#if defined		LCD_4_BIT_FUNC
void LCD_WRITE_STRING_4_BIT(uint_8* STRING)
 93a:	21 96       	adiw	r28, 0x01	; 1
{
	uint_8 i=0;
	while(STRING[i]!='\0')
	{
		LCD_SEND_DATA_FOUR_BIT(STRING[i],NIPPLE_MODE);
 93c:	61 e0       	ldi	r22, 0x01	; 1
 93e:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_SEND_DATA_FOUR_BIT>
/*_______________________________________________________________LCD4_BIT_WRITE_STRING_____________________________________________________________*/
#if defined		LCD_4_BIT_FUNC
void LCD_WRITE_STRING_4_BIT(uint_8* STRING)
{
	uint_8 i=0;
	while(STRING[i]!='\0')
 942:	89 91       	ld	r24, Y+
 944:	88 23       	and	r24, r24
 946:	d1 f7       	brne	.-12     	; 0x93c <LCD_WRITE_STRING_4_BIT+0xe>
	{
		LCD_SEND_DATA_FOUR_BIT(STRING[i],NIPPLE_MODE);
		STRING++;
	}
	
}
 948:	df 91       	pop	r29
 94a:	cf 91       	pop	r28
 94c:	08 95       	ret

0000094e <MOVE_CURSOR_4_BIT>:
/*_________________________________________________________________4_BIT_MOVE_CURSOR___________________________________________________________*/
#if defined		LCD_4_BIT_FUNC
void MOVE_CURSOR_4_BIT(uint_8 ROW,uint_8 COULMN)

{
	if((ROW<1) || (ROW>2) || (COULMN<1) ||(COULMN>16))
 94e:	98 2f       	mov	r25, r24
 950:	91 50       	subi	r25, 0x01	; 1
 952:	92 30       	cpi	r25, 0x02	; 2
 954:	20 f4       	brcc	.+8      	; 0x95e <MOVE_CURSOR_4_BIT+0x10>
 956:	66 23       	and	r22, r22
 958:	11 f0       	breq	.+4      	; 0x95e <MOVE_CURSOR_4_BIT+0x10>
 95a:	61 31       	cpi	r22, 0x11	; 17
 95c:	28 f0       	brcs	.+10     	; 0x968 <MOVE_CURSOR_4_BIT+0x1a>
	{
		LCD_SEND_CMD_FOUR_BIT(LCD_CURSOR_SET,NIPPLE_MODE);//----------------------->RETURN_CURSOR_TO_FIRST_POSITION
 95e:	80 e8       	ldi	r24, 0x80	; 128
 960:	61 e0       	ldi	r22, 0x01	; 1
 962:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
 966:	08 95       	ret
	}
	else if (ROW==1)
 968:	81 30       	cpi	r24, 0x01	; 1
 96a:	31 f4       	brne	.+12     	; 0x978 <MOVE_CURSOR_4_BIT+0x2a>
	{
		LCD_SEND_CMD_FOUR_BIT((0x80+(COULMN-1)),NIPPLE_MODE);//-------------------->LINE_ONE_SPECIFIC_COULMN
 96c:	86 2f       	mov	r24, r22
 96e:	81 58       	subi	r24, 0x81	; 129
 970:	61 e0       	ldi	r22, 0x01	; 1
 972:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
 976:	08 95       	ret
	}
	else if (ROW==2)
 978:	82 30       	cpi	r24, 0x02	; 2
 97a:	29 f4       	brne	.+10     	; 0x986 <MOVE_CURSOR_4_BIT+0x38>
	{
		LCD_SEND_CMD_FOUR_BIT((0xC0+(COULMN-1)),NIPPLE_MODE);//-------------------->LINE_TWO_SPECIFIC_COULMN
 97c:	86 2f       	mov	r24, r22
 97e:	81 54       	subi	r24, 0x41	; 65
 980:	61 e0       	ldi	r22, 0x01	; 1
 982:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
 986:	08 95       	ret

00000988 <main>:
#define EEPROM_BACKUP1			0x25		/***********************/
#define EEPROM_BACKUP2			0x26		/**SECOND_PASSWORD_SET**/
#define EEPROM_BACKUP3			0x27		/***********************/
/*____________________________________*/
void main(void)
{
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	00 d0       	rcall	.+0      	; 0x98e <main+0x6>
 98e:	0f 92       	push	r0
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
	uint_8 val=NOT_PRESSED;
	uint_8 flag=0,counter;
	uint_8 tries=MAX_TRIES;
/*__________________________________*/
	LCD_4_BIT_INIT(HIGH_NIPPLE);
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_4_BIT_INIT>
	KEYPAD_INIT();
 99a:	0e 94 0d 03 	call	0x61a	; 0x61a <KEYPAD_INIT>
/*__________________________________*/
	MOVE_CURSOR_4_BIT(1,4);
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	64 e0       	ldi	r22, 0x04	; 4
 9a2:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
	LCD_WRITE_STRING_4_BIT("WELCOME TO");
 9a6:	80 e7       	ldi	r24, 0x70	; 112
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
	MOVE_CURSOR_4_BIT(2,3);
 9ae:	82 e0       	ldi	r24, 0x02	; 2
 9b0:	63 e0       	ldi	r22, 0x03	; 3
 9b2:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
	LCD_WRITE_STRING_4_BIT("SAFE MACHINE");
 9b6:	8b e7       	ldi	r24, 0x7B	; 123
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	9e e9       	ldi	r25, 0x9E	; 158
 9c2:	a4 e2       	ldi	r26, 0x24	; 36
 9c4:	81 50       	subi	r24, 0x01	; 1
 9c6:	90 40       	sbci	r25, 0x00	; 0
 9c8:	a0 40       	sbci	r26, 0x00	; 0
 9ca:	e1 f7       	brne	.-8      	; 0x9c4 <main+0x3c>
 9cc:	00 c0       	rjmp	.+0      	; 0x9ce <main+0x46>
 9ce:	00 00       	nop
	_delay_ms(1500);
	LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	61 e0       	ldi	r22, 0x01	; 1
 9d4:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
	DIO_SET_PIN_DIRECTION('B',6,PIN_OUTPUT);
 9d8:	82 e4       	ldi	r24, 0x42	; 66
 9da:	66 e0       	ldi	r22, 0x06	; 6
 9dc:	41 e0       	ldi	r20, 0x01	; 1
 9de:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>
	DIO_SET_PIN_DIRECTION('B',7,PIN_OUTPUT);
 9e2:	82 e4       	ldi	r24, 0x42	; 66
 9e4:	67 e0       	ldi	r22, 0x07	; 7
 9e6:	41 e0       	ldi	r20, 0x01	; 1
 9e8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIRECTION>
/*____________________________________*/
void main(void)
{
	uint_8 val=NOT_PRESSED;
	uint_8 flag=0,counter;
	uint_8 tries=MAX_TRIES;
 9ec:	44 24       	eor	r4, r4
 9ee:	68 94       	set
 9f0:	41 f8       	bld	r4, 1
#define EEPROM_BACKUP3			0x27		/***********************/
/*____________________________________*/
void main(void)
{
	uint_8 val=NOT_PRESSED;
	uint_8 flag=0,counter;
 9f2:	00 e0       	ldi	r16, 0x00	; 0

	

	while (flag==0)
	{
		arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
 9f4:	0f 2e       	mov	r0, r31
 9f6:	fb e3       	ldi	r31, 0x3B	; 59
 9f8:	ef 2e       	mov	r14, r31
 9fa:	f1 e0       	ldi	r31, 0x01	; 1
 9fc:	ff 2e       	mov	r15, r31
 9fe:	f0 2d       	mov	r31, r0
 a00:	0f 2e       	mov	r0, r31
 a02:	fd ef       	ldi	r31, 0xFD	; 253
 a04:	6f 2e       	mov	r6, r31
 a06:	ff ef       	ldi	r31, 0xFF	; 255
 a08:	7f 2e       	mov	r7, r31
 a0a:	f0 2d       	mov	r31, r0
 a0c:	6e 0c       	add	r6, r14
 a0e:	7f 1c       	adc	r7, r15
		back[0]=back[1]=back[2]=NOT_PRESSED;
 a10:	0f 2e       	mov	r0, r31
 a12:	fe e3       	ldi	r31, 0x3E	; 62
 a14:	cf 2e       	mov	r12, r31
 a16:	f1 e0       	ldi	r31, 0x01	; 1
 a18:	df 2e       	mov	r13, r31
 a1a:	f0 2d       	mov	r31, r0
 a1c:	16 01       	movw	r2, r12
 a1e:	08 94       	sec
 a20:	21 08       	sbc	r2, r1
 a22:	31 08       	sbc	r3, r1
		LCD_WRITE_STRING_4_BIT("PLEASE ENTER THE");
		MOVE_CURSOR_4_BIT(2,1);
		LCD_WRITE_STRING_4_BIT("PASSWORD:");
 a24:	0f 2e       	mov	r0, r31
 a26:	f7 e9       	ldi	r31, 0x97	; 151
 a28:	af 2e       	mov	r10, r31
 a2a:	f0 e0       	ldi	r31, 0x00	; 0
 a2c:	bf 2e       	mov	r11, r31
 a2e:	f0 2d       	mov	r31, r0
 a30:	69 82       	std	Y+1, r6	; 0x01
 a32:	7a 82       	std	Y+2, r7	; 0x02
	
/*_______________________________________________________*/
/*____________________________SET________________________*/
while(1)
{
	if(EEPROM_READ(EEPROM_STATUS_LOCATIN)==NOT_PRESSED)
 a34:	80 e2       	ldi	r24, 0x20	; 32
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 94 03 03 	call	0x606	; 0x606 <EEPROM_READ>
 a3c:	8f 3f       	cpi	r24, 0xFF	; 255
 a3e:	09 f0       	breq	.+2      	; 0xa42 <main+0xba>
 a40:	cf c0       	rjmp	.+414    	; 0xbe0 <main+0x258>
	{
		LCD_WRITE_STRING_4_BIT("ENTER YOUR NEW");
 a42:	88 e8       	ldi	r24, 0x88	; 136
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
		MOVE_CURSOR_4_BIT(2,1);
 a4a:	82 e0       	ldi	r24, 0x02	; 2
 a4c:	61 e0       	ldi	r22, 0x01	; 1
 a4e:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
		LCD_WRITE_STRING_4_BIT("PASSWORD:");
 a52:	c5 01       	movw	r24, r10
 a54:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
 a58:	01 e2       	ldi	r16, 0x21	; 33
 a5a:	10 e0       	ldi	r17, 0x00	; 0
	/*______________________________________*/
			for(counter=0;counter<=3;counter++)
			{
				while(KEYPAD_READ()==NOT_PRESSED);											
 a5c:	0e 94 26 03 	call	0x64c	; 0x64c <KEYPAD_READ>
 a60:	8f 3f       	cpi	r24, 0xFF	; 255
 a62:	e1 f3       	breq	.-8      	; 0xa5c <main+0xd4>
				EEPROM_WRITE(EEPROM_LOCATION1+counter,KEYPAD_READ());			/**********************************/
 a64:	0e 94 26 03 	call	0x64c	; 0x64c <KEYPAD_READ>
 a68:	68 2f       	mov	r22, r24
 a6a:	c8 01       	movw	r24, r16
 a6c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_WRITE>

#define EEPROM_BACKUP1			0x25		/***********************/
#define EEPROM_BACKUP2			0x26		/**SECOND_PASSWORD_SET**/
#define EEPROM_BACKUP3			0x27		/***********************/
/*____________________________________*/
void main(void)
 a70:	0f 2e       	mov	r0, r31
 a72:	f9 ee       	ldi	r31, 0xE9	; 233
 a74:	8f 2e       	mov	r8, r31
 a76:	f0 2d       	mov	r31, r0
 a78:	80 0e       	add	r8, r16
	/*______________________________________*/
			for(counter=0;counter<=3;counter++)
			{
				while(KEYPAD_READ()==NOT_PRESSED);											
				EEPROM_WRITE(EEPROM_LOCATION1+counter,KEYPAD_READ());			/**********************************/
				MOVE_CURSOR_4_BIT(2,10+counter);								/**********************************/
 a7a:	82 e0       	ldi	r24, 0x02	; 2
 a7c:	68 2d       	mov	r22, r8
 a7e:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
				LCD_SEND_DATA_FOUR_BIT(KEYPAD_READ(),HIGH_NIPPLE);				/**********EEPROM_SET**************/
 a82:	0e 94 26 03 	call	0x64c	; 0x64c <KEYPAD_READ>
 a86:	61 e0       	ldi	r22, 0x01	; 1
 a88:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_SEND_DATA_FOUR_BIT>
 a8c:	8f ef       	ldi	r24, 0xFF	; 255
 a8e:	94 e3       	ldi	r25, 0x34	; 52
 a90:	ac e0       	ldi	r26, 0x0C	; 12
 a92:	81 50       	subi	r24, 0x01	; 1
 a94:	90 40       	sbci	r25, 0x00	; 0
 a96:	a0 40       	sbci	r26, 0x00	; 0
 a98:	e1 f7       	brne	.-8      	; 0xa92 <main+0x10a>
 a9a:	00 c0       	rjmp	.+0      	; 0xa9c <main+0x114>
 a9c:	00 00       	nop
				_delay_ms(500);													/**********************************/
				MOVE_CURSOR_4_BIT(2,10+counter);								/**********************************/
 a9e:	82 e0       	ldi	r24, 0x02	; 2
 aa0:	68 2d       	mov	r22, r8
 aa2:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
				LCD_SEND_DATA_FOUR_BIT('*',HIGH_NIPPLE);
 aa6:	8a e2       	ldi	r24, 0x2A	; 42
 aa8:	61 e0       	ldi	r22, 0x01	; 1
 aaa:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_SEND_DATA_FOUR_BIT>
 aae:	0f 5f       	subi	r16, 0xFF	; 255
 ab0:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LCD_WRITE_STRING_4_BIT("ENTER YOUR NEW");
		MOVE_CURSOR_4_BIT(2,1);
		LCD_WRITE_STRING_4_BIT("PASSWORD:");
	/*______________________________________*/
			for(counter=0;counter<=3;counter++)
 ab2:	05 32       	cpi	r16, 0x25	; 37
 ab4:	11 05       	cpc	r17, r1
 ab6:	91 f6       	brne	.-92     	; 0xa5c <main+0xd4>
				LCD_SEND_DATA_FOUR_BIT(KEYPAD_READ(),HIGH_NIPPLE);				/**********EEPROM_SET**************/
				_delay_ms(500);													/**********************************/
				MOVE_CURSOR_4_BIT(2,10+counter);								/**********************************/
				LCD_SEND_DATA_FOUR_BIT('*',HIGH_NIPPLE);
			}		
		LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	61 e0       	ldi	r22, 0x01	; 1
 abc:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
		MOVE_CURSOR_4_BIT(1,5);
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	65 e0       	ldi	r22, 0x05	; 5
 ac4:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
		LCD_WRITE_STRING_4_BIT("PASSWORD");
 ac8:	81 ea       	ldi	r24, 0xA1	; 161
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
		MOVE_CURSOR_4_BIT(2,6);
 ad0:	82 e0       	ldi	r24, 0x02	; 2
 ad2:	66 e0       	ldi	r22, 0x06	; 6
 ad4:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
		LCD_WRITE_STRING_4_BIT("SETTED");
 ad8:	8a ea       	ldi	r24, 0xAA	; 170
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
 ae0:	8f ef       	ldi	r24, 0xFF	; 255
 ae2:	94 e3       	ldi	r25, 0x34	; 52
 ae4:	ac e0       	ldi	r26, 0x0C	; 12
 ae6:	81 50       	subi	r24, 0x01	; 1
 ae8:	90 40       	sbci	r25, 0x00	; 0
 aea:	a0 40       	sbci	r26, 0x00	; 0
 aec:	e1 f7       	brne	.-8      	; 0xae6 <main+0x15e>
 aee:	00 c0       	rjmp	.+0      	; 0xaf0 <main+0x168>
 af0:	00 00       	nop
		_delay_ms(500);
		EEPROM_WRITE(EEPROM_STATUS_LOCATIN,0x00);
 af2:	80 e2       	ldi	r24, 0x20	; 32
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	60 e0       	ldi	r22, 0x00	; 0
 af8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_WRITE>
		LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 afc:	81 e0       	ldi	r24, 0x01	; 1
 afe:	61 e0       	ldi	r22, 0x01	; 1
 b00:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
 b04:	8f ef       	ldi	r24, 0xFF	; 255
 b06:	94 e3       	ldi	r25, 0x34	; 52
 b08:	ac e0       	ldi	r26, 0x0C	; 12
 b0a:	81 50       	subi	r24, 0x01	; 1
 b0c:	90 40       	sbci	r25, 0x00	; 0
 b0e:	a0 40       	sbci	r26, 0x00	; 0
 b10:	e1 f7       	brne	.-8      	; 0xb0a <main+0x182>
 b12:	00 c0       	rjmp	.+0      	; 0xb14 <main+0x18c>
 b14:	00 00       	nop
		_delay_ms(500);
/*******************************************************************/
/*******************************************************************/
/*******************************************************************/
		if(EEPROM_READ(EEPROM_STATUS_LOCATIN)==0x00)
 b16:	80 e2       	ldi	r24, 0x20	; 32
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 03 03 	call	0x606	; 0x606 <EEPROM_READ>
 b1e:	88 23       	and	r24, r24
 b20:	09 f0       	breq	.+2      	; 0xb24 <main+0x19c>
 b22:	ff c1       	rjmp	.+1022   	; 0xf22 <main+0x59a>
		{
			LCD_WRITE_STRING_4_BIT("SET BACKUP");
 b24:	81 eb       	ldi	r24, 0xB1	; 177
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
			MOVE_CURSOR_4_BIT(2,1);
 b2c:	82 e0       	ldi	r24, 0x02	; 2
 b2e:	61 e0       	ldi	r22, 0x01	; 1
 b30:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
			LCD_WRITE_STRING_4_BIT("PASS:");
 b34:	8c eb       	ldi	r24, 0xBC	; 188
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
 b3c:	05 e2       	ldi	r16, 0x25	; 37
 b3e:	10 e0       	ldi	r17, 0x00	; 0
			/*______________________________________*/
			for(counter=0;counter<=2;counter++)
			{
				while(KEYPAD_READ()==NOT_PRESSED);
 b40:	0e 94 26 03 	call	0x64c	; 0x64c <KEYPAD_READ>
 b44:	8f 3f       	cpi	r24, 0xFF	; 255
 b46:	e1 f3       	breq	.-8      	; 0xb40 <main+0x1b8>
				EEPROM_WRITE(EEPROM_BACKUP1+counter,KEYPAD_READ());			/**********************************/
 b48:	0e 94 26 03 	call	0x64c	; 0x64c <KEYPAD_READ>
 b4c:	68 2f       	mov	r22, r24
 b4e:	c8 01       	movw	r24, r16
 b50:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_WRITE>

#define EEPROM_BACKUP1			0x25		/***********************/
#define EEPROM_BACKUP2			0x26		/**SECOND_PASSWORD_SET**/
#define EEPROM_BACKUP3			0x27		/***********************/
/*____________________________________*/
void main(void)
 b54:	0f 2e       	mov	r0, r31
 b56:	f1 ee       	ldi	r31, 0xE1	; 225
 b58:	8f 2e       	mov	r8, r31
 b5a:	f0 2d       	mov	r31, r0
 b5c:	80 0e       	add	r8, r16
			/*______________________________________*/
			for(counter=0;counter<=2;counter++)
			{
				while(KEYPAD_READ()==NOT_PRESSED);
				EEPROM_WRITE(EEPROM_BACKUP1+counter,KEYPAD_READ());			/**********************************/
				MOVE_CURSOR_4_BIT(2,6+counter);								/**********************************/
 b5e:	82 e0       	ldi	r24, 0x02	; 2
 b60:	68 2d       	mov	r22, r8
 b62:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
				LCD_SEND_DATA_FOUR_BIT(KEYPAD_READ(),HIGH_NIPPLE);			/**********BACKUP_SET**************/
 b66:	0e 94 26 03 	call	0x64c	; 0x64c <KEYPAD_READ>
 b6a:	61 e0       	ldi	r22, 0x01	; 1
 b6c:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_SEND_DATA_FOUR_BIT>
 b70:	8f ef       	ldi	r24, 0xFF	; 255
 b72:	94 e3       	ldi	r25, 0x34	; 52
 b74:	ac e0       	ldi	r26, 0x0C	; 12
 b76:	81 50       	subi	r24, 0x01	; 1
 b78:	90 40       	sbci	r25, 0x00	; 0
 b7a:	a0 40       	sbci	r26, 0x00	; 0
 b7c:	e1 f7       	brne	.-8      	; 0xb76 <main+0x1ee>
 b7e:	00 c0       	rjmp	.+0      	; 0xb80 <main+0x1f8>
 b80:	00 00       	nop
				_delay_ms(500);												/**********************************/
				MOVE_CURSOR_4_BIT(2,6+counter);								/**********************************/
 b82:	82 e0       	ldi	r24, 0x02	; 2
 b84:	68 2d       	mov	r22, r8
 b86:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
				LCD_SEND_DATA_FOUR_BIT('*',HIGH_NIPPLE);
 b8a:	8a e2       	ldi	r24, 0x2A	; 42
 b8c:	61 e0       	ldi	r22, 0x01	; 1
 b8e:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_SEND_DATA_FOUR_BIT>
 b92:	0f 5f       	subi	r16, 0xFF	; 255
 b94:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			LCD_WRITE_STRING_4_BIT("SET BACKUP");
			MOVE_CURSOR_4_BIT(2,1);
			LCD_WRITE_STRING_4_BIT("PASS:");
			/*______________________________________*/
			for(counter=0;counter<=2;counter++)
 b96:	08 32       	cpi	r16, 0x28	; 40
 b98:	11 05       	cpc	r17, r1
 b9a:	91 f6       	brne	.-92     	; 0xb40 <main+0x1b8>
				LCD_SEND_DATA_FOUR_BIT(KEYPAD_READ(),HIGH_NIPPLE);			/**********BACKUP_SET**************/
				_delay_ms(500);												/**********************************/
				MOVE_CURSOR_4_BIT(2,6+counter);								/**********************************/
				LCD_SEND_DATA_FOUR_BIT('*',HIGH_NIPPLE);
			}
			LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	61 e0       	ldi	r22, 0x01	; 1
 ba0:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
			MOVE_CURSOR_4_BIT(1,6);
 ba4:	81 e0       	ldi	r24, 0x01	; 1
 ba6:	66 e0       	ldi	r22, 0x06	; 6
 ba8:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
			LCD_WRITE_STRING_4_BIT("BACKUP");
 bac:	82 ec       	ldi	r24, 0xC2	; 194
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
			MOVE_CURSOR_4_BIT(2,6);
 bb4:	82 e0       	ldi	r24, 0x02	; 2
 bb6:	66 e0       	ldi	r22, 0x06	; 6
 bb8:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
			LCD_WRITE_STRING_4_BIT("SETTED");
 bbc:	8a ea       	ldi	r24, 0xAA	; 170
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
 bc4:	8f ef       	ldi	r24, 0xFF	; 255
 bc6:	94 e3       	ldi	r25, 0x34	; 52
 bc8:	ac e0       	ldi	r26, 0x0C	; 12
 bca:	81 50       	subi	r24, 0x01	; 1
 bcc:	90 40       	sbci	r25, 0x00	; 0
 bce:	a0 40       	sbci	r26, 0x00	; 0
 bd0:	e1 f7       	brne	.-8      	; 0xbca <main+0x242>
 bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <main+0x24c>
 bd4:	00 00       	nop
			_delay_ms(500);
			LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 bd6:	81 e0       	ldi	r24, 0x01	; 1
 bd8:	61 e0       	ldi	r22, 0x01	; 1
 bda:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
 bde:	a1 c1       	rjmp	.+834    	; 0xf22 <main+0x59a>
/*_______________________________________________________*/
/*_______________________________________________________*///----------------->READY_CHECK_PASSWORD

	

	while (flag==0)
 be0:	00 23       	and	r16, r16
 be2:	09 f0       	breq	.+2      	; 0xbe6 <main+0x25e>
 be4:	27 cf       	rjmp	.-434    	; 0xa34 <main+0xac>
 be6:	02 c0       	rjmp	.+4      	; 0xbec <main+0x264>
				DIO_PORT_PIN_WRITE('b',6,PIN_HIGH);
			}/*________________________________*///--->CASE_CORRECT			
	
			else
			{
				tries=tries-1;
 be8:	45 2c       	mov	r4, r5
 bea:	05 c0       	rjmp	.+10     	; 0xbf6 <main+0x26e>

	

	while (flag==0)
	{
		arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
 bec:	47 01       	movw	r8, r14
 bee:	08 94       	sec
 bf0:	81 08       	sbc	r8, r1
 bf2:	91 08       	sbc	r9, r1
				{
					LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
					MOVE_CURSOR_4_BIT(1,4);
					LCD_WRITE_STRING_4_BIT("INCORRECT!");
					MOVE_CURSOR_4_BIT(2,1);
					LCD_WRITE_STRING_4_BIT("TRY AGAINS:");
 bf4:	0b 83       	std	Y+3, r16	; 0x03

	

	while (flag==0)
	{
		arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
 bf6:	8f ef       	ldi	r24, 0xFF	; 255
 bf8:	d7 01       	movw	r26, r14
 bfa:	8c 93       	st	X, r24
 bfc:	f4 01       	movw	r30, r8
 bfe:	80 83       	st	Z, r24
 c00:	80 93 39 01 	sts	0x0139, r24
 c04:	d3 01       	movw	r26, r6
 c06:	8c 93       	st	X, r24
		back[0]=back[1]=back[2]=NOT_PRESSED;
 c08:	f6 01       	movw	r30, r12
 c0a:	80 83       	st	Z, r24
 c0c:	d1 01       	movw	r26, r2
 c0e:	8c 93       	st	X, r24
 c10:	80 93 3c 01 	sts	0x013C, r24
		LCD_WRITE_STRING_4_BIT("PLEASE ENTER THE");
 c14:	89 ec       	ldi	r24, 0xC9	; 201
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
		MOVE_CURSOR_4_BIT(2,1);
 c1c:	82 e0       	ldi	r24, 0x02	; 2
 c1e:	61 e0       	ldi	r22, 0x01	; 1
 c20:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
		LCD_WRITE_STRING_4_BIT("PASSWORD:");
 c24:	c5 01       	movw	r24, r10
 c26:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
 c2a:	09 81       	ldd	r16, Y+1	; 0x01
 c2c:	1a 81       	ldd	r17, Y+2	; 0x02
 c2e:	0f 2e       	mov	r0, r31
 c30:	fa e0       	ldi	r31, 0x0A	; 10
 c32:	5f 2e       	mov	r5, r31
 c34:	f0 2d       	mov	r31, r0
/*____________________________________________________________________________*/	
		
		for(counter=0;counter<=3;counter++)
			{
				
				while(KEYPAD_READ()==NOT_PRESSED);					/**************************/
 c36:	0e 94 26 03 	call	0x64c	; 0x64c <KEYPAD_READ>
 c3a:	8f 3f       	cpi	r24, 0xFF	; 255
 c3c:	e1 f3       	breq	.-8      	; 0xc36 <main+0x2ae>
				arr[counter]=KEYPAD_READ();							/**************************/
 c3e:	0e 94 26 03 	call	0x64c	; 0x64c <KEYPAD_READ>
 c42:	f8 01       	movw	r30, r16
 c44:	81 93       	st	Z+, r24
 c46:	8f 01       	movw	r16, r30
				LCD_SEND_DATA_FOUR_BIT(arr[counter],HIGH_NIPPLE);	/****SOTRES_PASS_IN_ARRAY**/	
 c48:	61 e0       	ldi	r22, 0x01	; 1
 c4a:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_SEND_DATA_FOUR_BIT>
				MOVE_CURSOR_4_BIT(2,10+counter);					/**************************/
 c4e:	82 e0       	ldi	r24, 0x02	; 2
 c50:	65 2d       	mov	r22, r5
 c52:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
 c56:	8f ef       	ldi	r24, 0xFF	; 255
 c58:	94 e3       	ldi	r25, 0x34	; 52
 c5a:	ac e0       	ldi	r26, 0x0C	; 12
 c5c:	81 50       	subi	r24, 0x01	; 1
 c5e:	90 40       	sbci	r25, 0x00	; 0
 c60:	a0 40       	sbci	r26, 0x00	; 0
 c62:	e1 f7       	brne	.-8      	; 0xc5c <main+0x2d4>
 c64:	00 c0       	rjmp	.+0      	; 0xc66 <main+0x2de>
 c66:	00 00       	nop
				_delay_ms(500);										/**************************/
				LCD_SEND_DATA_FOUR_BIT('*',HIGH_NIPPLE);
 c68:	8a e2       	ldi	r24, 0x2A	; 42
 c6a:	61 e0       	ldi	r22, 0x01	; 1
 c6c:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_SEND_DATA_FOUR_BIT>
 c70:	53 94       	inc	r5
		LCD_WRITE_STRING_4_BIT("PLEASE ENTER THE");
		MOVE_CURSOR_4_BIT(2,1);
		LCD_WRITE_STRING_4_BIT("PASSWORD:");
/*____________________________________________________________________________*/	
		
		for(counter=0;counter<=3;counter++)
 c72:	9e e0       	ldi	r25, 0x0E	; 14
 c74:	59 16       	cp	r5, r25
 c76:	f9 f6       	brne	.-66     	; 0xc36 <main+0x2ae>
				_delay_ms(500);										/**************************/
				LCD_SEND_DATA_FOUR_BIT('*',HIGH_NIPPLE);
			}
/*____________________________________________________________________________*/	
			
			if(EEPROM_READ(EEPROM_LOCATION1)==arr[0] && EEPROM_READ(EEPROM_LOCATION2)==arr[1] && EEPROM_READ(EEPROM_LOCATION3)==arr[2] &&EEPROM_READ(EEPROM_LOCATION4)==arr[3] )
 c78:	81 e2       	ldi	r24, 0x21	; 33
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	0e 94 03 03 	call	0x606	; 0x606 <EEPROM_READ>
 c80:	28 2f       	mov	r18, r24
 c82:	30 e0       	ldi	r19, 0x00	; 0
 c84:	e8 e3       	ldi	r30, 0x38	; 56
 c86:	f1 e0       	ldi	r31, 0x01	; 1
 c88:	80 81       	ld	r24, Z
 c8a:	99 27       	eor	r25, r25
 c8c:	87 fd       	sbrc	r24, 7
 c8e:	90 95       	com	r25
 c90:	28 17       	cp	r18, r24
 c92:	39 07       	cpc	r19, r25
 c94:	09 f0       	breq	.+2      	; 0xc98 <main+0x310>
 c96:	46 c0       	rjmp	.+140    	; 0xd24 <main+0x39c>
 c98:	82 e2       	ldi	r24, 0x22	; 34
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	0e 94 03 03 	call	0x606	; 0x606 <EEPROM_READ>
 ca0:	28 2f       	mov	r18, r24
 ca2:	30 e0       	ldi	r19, 0x00	; 0
 ca4:	a9 e3       	ldi	r26, 0x39	; 57
 ca6:	b1 e0       	ldi	r27, 0x01	; 1
 ca8:	8c 91       	ld	r24, X
 caa:	99 27       	eor	r25, r25
 cac:	87 fd       	sbrc	r24, 7
 cae:	90 95       	com	r25
 cb0:	28 17       	cp	r18, r24
 cb2:	39 07       	cpc	r19, r25
 cb4:	b9 f5       	brne	.+110    	; 0xd24 <main+0x39c>
 cb6:	83 e2       	ldi	r24, 0x23	; 35
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	0e 94 03 03 	call	0x606	; 0x606 <EEPROM_READ>
 cbe:	28 2f       	mov	r18, r24
 cc0:	30 e0       	ldi	r19, 0x00	; 0
 cc2:	ea e3       	ldi	r30, 0x3A	; 58
 cc4:	f1 e0       	ldi	r31, 0x01	; 1
 cc6:	80 81       	ld	r24, Z
 cc8:	99 27       	eor	r25, r25
 cca:	87 fd       	sbrc	r24, 7
 ccc:	90 95       	com	r25
 cce:	28 17       	cp	r18, r24
 cd0:	39 07       	cpc	r19, r25
 cd2:	41 f5       	brne	.+80     	; 0xd24 <main+0x39c>
 cd4:	84 e2       	ldi	r24, 0x24	; 36
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	0e 94 03 03 	call	0x606	; 0x606 <EEPROM_READ>
 cdc:	28 2f       	mov	r18, r24
 cde:	30 e0       	ldi	r19, 0x00	; 0
 ce0:	d7 01       	movw	r26, r14
 ce2:	8c 91       	ld	r24, X
 ce4:	99 27       	eor	r25, r25
 ce6:	87 fd       	sbrc	r24, 7
 ce8:	90 95       	com	r25
 cea:	28 17       	cp	r18, r24
 cec:	39 07       	cpc	r19, r25
 cee:	d1 f4       	brne	.+52     	; 0xd24 <main+0x39c>
			{
				LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 cf0:	81 e0       	ldi	r24, 0x01	; 1
 cf2:	61 e0       	ldi	r22, 0x01	; 1
 cf4:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
				MOVE_CURSOR_4_BIT(1,3);
 cf8:	81 e0       	ldi	r24, 0x01	; 1
 cfa:	63 e0       	ldi	r22, 0x03	; 3
 cfc:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
				LCD_WRITE_STRING_4_BIT("CORRECT PASS");						/******************/
 d00:	8a ed       	ldi	r24, 0xDA	; 218
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
				MOVE_CURSOR_4_BIT(2,4);										/**CHECK_PASSWORD**/
 d08:	82 e0       	ldi	r24, 0x02	; 2
 d0a:	64 e0       	ldi	r22, 0x04	; 4
 d0c:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
				LCD_WRITE_STRING_4_BIT("LOCK OPENED!");						/******************/
 d10:	87 ee       	ldi	r24, 0xE7	; 231
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
				flag=1;
				DIO_PORT_PIN_WRITE('b',6,PIN_HIGH);
 d18:	82 e6       	ldi	r24, 0x62	; 98
 d1a:	66 e0       	ldi	r22, 0x06	; 6
 d1c:	41 e0       	ldi	r20, 0x01	; 1
 d1e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
 d22:	01 c1       	rjmp	.+514    	; 0xf26 <main+0x59e>
			}/*________________________________*///--->CASE_CORRECT			
	
			else
			{
				tries=tries-1;
 d24:	54 2c       	mov	r5, r4
 d26:	5a 94       	dec	r5
				if(tries>0)
 d28:	69 f1       	breq	.+90     	; 0xd84 <main+0x3fc>
				{
					LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 d2a:	81 e0       	ldi	r24, 0x01	; 1
 d2c:	61 e0       	ldi	r22, 0x01	; 1
 d2e:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
					MOVE_CURSOR_4_BIT(1,4);
 d32:	81 e0       	ldi	r24, 0x01	; 1
 d34:	64 e0       	ldi	r22, 0x04	; 4
 d36:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
					LCD_WRITE_STRING_4_BIT("INCORRECT!");
 d3a:	84 ef       	ldi	r24, 0xF4	; 244
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
					MOVE_CURSOR_4_BIT(2,1);
 d42:	82 e0       	ldi	r24, 0x02	; 2
 d44:	61 e0       	ldi	r22, 0x01	; 1
 d46:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
					LCD_WRITE_STRING_4_BIT("TRY AGAINS:");
 d4a:	8f ef       	ldi	r24, 0xFF	; 255
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
					LCD_SEND_DATA_FOUR_BIT(tries+48,HIGH_NIPPLE);
 d52:	84 2d       	mov	r24, r4
 d54:	81 5d       	subi	r24, 0xD1	; 209
 d56:	61 e0       	ldi	r22, 0x01	; 1
 d58:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_SEND_DATA_FOUR_BIT>
 d5c:	8f ef       	ldi	r24, 0xFF	; 255
 d5e:	99 e6       	ldi	r25, 0x69	; 105
 d60:	a8 e1       	ldi	r26, 0x18	; 24
 d62:	81 50       	subi	r24, 0x01	; 1
 d64:	90 40       	sbci	r25, 0x00	; 0
 d66:	a0 40       	sbci	r26, 0x00	; 0
 d68:	e1 f7       	brne	.-8      	; 0xd62 <main+0x3da>
 d6a:	00 c0       	rjmp	.+0      	; 0xd6c <main+0x3e4>
 d6c:	00 00       	nop
					_delay_ms(1000);
					LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 d6e:	81 e0       	ldi	r24, 0x01	; 1
 d70:	61 e0       	ldi	r22, 0x01	; 1
 d72:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
/*_______________________________________________________*/
/*_______________________________________________________*///----------------->READY_CHECK_PASSWORD

	

	while (flag==0)
 d76:	9b 81       	ldd	r25, Y+3	; 0x03
 d78:	99 23       	and	r25, r25
 d7a:	09 f4       	brne	.+2      	; 0xd7e <main+0x3f6>
 d7c:	35 cf       	rjmp	.-406    	; 0xbe8 <main+0x260>
 d7e:	09 2f       	mov	r16, r25
				DIO_PORT_PIN_WRITE('b',6,PIN_HIGH);
			}/*________________________________*///--->CASE_CORRECT			
	
			else
			{
				tries=tries-1;
 d80:	45 2c       	mov	r4, r5
 d82:	58 ce       	rjmp	.-848    	; 0xa34 <main+0xac>
					_delay_ms(1000);
					LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
				}
				else
				{
					LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 d84:	81 e0       	ldi	r24, 0x01	; 1
 d86:	61 e0       	ldi	r22, 0x01	; 1
 d88:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
					MOVE_CURSOR_4_BIT(1,2);
 d8c:	81 e0       	ldi	r24, 0x01	; 1
 d8e:	62 e0       	ldi	r22, 0x02	; 2
 d90:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
					LCD_WRITE_STRING_4_BIT("INTRUDER ALARM");
 d94:	8b e0       	ldi	r24, 0x0B	; 11
 d96:	91 e0       	ldi	r25, 0x01	; 1
 d98:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
					MOVE_CURSOR_4_BIT(2,2);
 d9c:	82 e0       	ldi	r24, 0x02	; 2
 d9e:	62 e0       	ldi	r22, 0x02	; 2
 da0:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
					DIO_PORT_PIN_WRITE('b',7,PIN_HIGH);
 da4:	82 e6       	ldi	r24, 0x62	; 98
 da6:	67 e0       	ldi	r22, 0x07	; 7
 da8:	41 e0       	ldi	r20, 0x01	; 1
 daa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
 dae:	8f ef       	ldi	r24, 0xFF	; 255
 db0:	98 e0       	ldi	r25, 0x08	; 8
 db2:	ad e3       	ldi	r26, 0x3D	; 61
 db4:	81 50       	subi	r24, 0x01	; 1
 db6:	90 40       	sbci	r25, 0x00	; 0
 db8:	a0 40       	sbci	r26, 0x00	; 0
 dba:	e1 f7       	brne	.-8      	; 0xdb4 <main+0x42c>
 dbc:	00 c0       	rjmp	.+0      	; 0xdbe <main+0x436>
 dbe:	00 00       	nop
					_delay_ms(2500);
					DIO_PORT_PIN_WRITE('b',7,PIN_LOW);
 dc0:	82 e6       	ldi	r24, 0x62	; 98
 dc2:	67 e0       	ldi	r22, 0x07	; 7
 dc4:	40 e0       	ldi	r20, 0x00	; 0
 dc6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
					LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 dca:	81 e0       	ldi	r24, 0x01	; 1
 dcc:	61 e0       	ldi	r22, 0x01	; 1
 dce:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
					LCD_WRITE_STRING_4_BIT("ENTER BACKUP");
 dd2:	8a e1       	ldi	r24, 0x1A	; 26
 dd4:	91 e0       	ldi	r25, 0x01	; 1
 dd6:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
					MOVE_CURSOR_4_BIT(2,1);
 dda:	82 e0       	ldi	r24, 0x02	; 2
 ddc:	61 e0       	ldi	r22, 0x01	; 1
 dde:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
					LCD_WRITE_STRING_4_BIT("PASS:");
 de2:	8c eb       	ldi	r24, 0xBC	; 188
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
 dea:	0c e3       	ldi	r16, 0x3C	; 60
 dec:	11 e0       	ldi	r17, 0x01	; 1
 dee:	0f 2e       	mov	r0, r31
 df0:	f6 e0       	ldi	r31, 0x06	; 6
 df2:	8f 2e       	mov	r8, r31
 df4:	f0 2d       	mov	r31, r0
					for(counter=0;counter<=2;counter++)
					{
						
						while(KEYPAD_READ()==NOT_PRESSED);					/****************************/
 df6:	0e 94 26 03 	call	0x64c	; 0x64c <KEYPAD_READ>
 dfa:	8f 3f       	cpi	r24, 0xFF	; 255
 dfc:	e1 f3       	breq	.-8      	; 0xdf6 <main+0x46e>
						back[counter]=KEYPAD_READ();						/****************************/
 dfe:	0e 94 26 03 	call	0x64c	; 0x64c <KEYPAD_READ>
 e02:	d8 01       	movw	r26, r16
 e04:	8d 93       	st	X+, r24
 e06:	8d 01       	movw	r16, r26
						LCD_SEND_DATA_FOUR_BIT(back[counter],HIGH_NIPPLE);	/****SOTRES_BACKUP_IN_ARRAY**/
 e08:	61 e0       	ldi	r22, 0x01	; 1
 e0a:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_SEND_DATA_FOUR_BIT>
						MOVE_CURSOR_4_BIT(2,6+counter);						/****************************/
 e0e:	82 e0       	ldi	r24, 0x02	; 2
 e10:	68 2d       	mov	r22, r8
 e12:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
 e16:	8f ef       	ldi	r24, 0xFF	; 255
 e18:	94 e3       	ldi	r25, 0x34	; 52
 e1a:	ac e0       	ldi	r26, 0x0C	; 12
 e1c:	81 50       	subi	r24, 0x01	; 1
 e1e:	90 40       	sbci	r25, 0x00	; 0
 e20:	a0 40       	sbci	r26, 0x00	; 0
 e22:	e1 f7       	brne	.-8      	; 0xe1c <main+0x494>
 e24:	00 c0       	rjmp	.+0      	; 0xe26 <main+0x49e>
 e26:	00 00       	nop
						_delay_ms(500);										/****************************/
						LCD_SEND_DATA_FOUR_BIT('*',HIGH_NIPPLE);
 e28:	8a e2       	ldi	r24, 0x2A	; 42
 e2a:	61 e0       	ldi	r22, 0x01	; 1
 e2c:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_SEND_DATA_FOUR_BIT>
 e30:	83 94       	inc	r8
					DIO_PORT_PIN_WRITE('b',7,PIN_LOW);
					LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
					LCD_WRITE_STRING_4_BIT("ENTER BACKUP");
					MOVE_CURSOR_4_BIT(2,1);
					LCD_WRITE_STRING_4_BIT("PASS:");
					for(counter=0;counter<=2;counter++)
 e32:	99 e0       	ldi	r25, 0x09	; 9
 e34:	89 16       	cp	r8, r25
 e36:	f9 f6       	brne	.-66     	; 0xdf6 <main+0x46e>
						LCD_SEND_DATA_FOUR_BIT(back[counter],HIGH_NIPPLE);	/****SOTRES_BACKUP_IN_ARRAY**/
						MOVE_CURSOR_4_BIT(2,6+counter);						/****************************/
						_delay_ms(500);										/****************************/
						LCD_SEND_DATA_FOUR_BIT('*',HIGH_NIPPLE);
					}
					if(EEPROM_READ(EEPROM_BACKUP1)==back[0] && EEPROM_READ(EEPROM_BACKUP2)==back[1] && EEPROM_READ(EEPROM_BACKUP3)==back[2])
 e38:	85 e2       	ldi	r24, 0x25	; 37
 e3a:	90 e0       	ldi	r25, 0x00	; 0
 e3c:	0e 94 03 03 	call	0x606	; 0x606 <EEPROM_READ>
 e40:	28 2f       	mov	r18, r24
 e42:	30 e0       	ldi	r19, 0x00	; 0
 e44:	80 91 3c 01 	lds	r24, 0x013C
 e48:	99 27       	eor	r25, r25
 e4a:	87 fd       	sbrc	r24, 7
 e4c:	90 95       	com	r25
 e4e:	28 17       	cp	r18, r24
 e50:	39 07       	cpc	r19, r25
 e52:	09 f0       	breq	.+2      	; 0xe56 <main+0x4ce>
 e54:	44 c0       	rjmp	.+136    	; 0xede <main+0x556>
 e56:	86 e2       	ldi	r24, 0x26	; 38
 e58:	90 e0       	ldi	r25, 0x00	; 0
 e5a:	0e 94 03 03 	call	0x606	; 0x606 <EEPROM_READ>
 e5e:	28 2f       	mov	r18, r24
 e60:	30 e0       	ldi	r19, 0x00	; 0
 e62:	80 91 3d 01 	lds	r24, 0x013D
 e66:	99 27       	eor	r25, r25
 e68:	87 fd       	sbrc	r24, 7
 e6a:	90 95       	com	r25
 e6c:	28 17       	cp	r18, r24
 e6e:	39 07       	cpc	r19, r25
 e70:	b1 f5       	brne	.+108    	; 0xede <main+0x556>
 e72:	87 e2       	ldi	r24, 0x27	; 39
 e74:	90 e0       	ldi	r25, 0x00	; 0
 e76:	0e 94 03 03 	call	0x606	; 0x606 <EEPROM_READ>
 e7a:	28 2f       	mov	r18, r24
 e7c:	30 e0       	ldi	r19, 0x00	; 0
 e7e:	d6 01       	movw	r26, r12
 e80:	8c 91       	ld	r24, X
 e82:	99 27       	eor	r25, r25
 e84:	87 fd       	sbrc	r24, 7
 e86:	90 95       	com	r25
 e88:	28 17       	cp	r18, r24
 e8a:	39 07       	cpc	r19, r25
 e8c:	41 f5       	brne	.+80     	; 0xede <main+0x556>
					{
						EEPROM_WRITE(EEPROM_STATUS_LOCATIN,0xff);
 e8e:	80 e2       	ldi	r24, 0x20	; 32
 e90:	90 e0       	ldi	r25, 0x00	; 0
 e92:	6f ef       	ldi	r22, 0xFF	; 255
 e94:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_WRITE>
						EEPROM_WRITE(EEPROM_LOCATION1,0xff);
 e98:	81 e2       	ldi	r24, 0x21	; 33
 e9a:	90 e0       	ldi	r25, 0x00	; 0
 e9c:	6f ef       	ldi	r22, 0xFF	; 255
 e9e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_WRITE>
						EEPROM_WRITE(EEPROM_LOCATION2,0xff);
 ea2:	82 e2       	ldi	r24, 0x22	; 34
 ea4:	90 e0       	ldi	r25, 0x00	; 0
 ea6:	6f ef       	ldi	r22, 0xFF	; 255
 ea8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_WRITE>
						EEPROM_WRITE(EEPROM_LOCATION3,0xff);
 eac:	83 e2       	ldi	r24, 0x23	; 35
 eae:	90 e0       	ldi	r25, 0x00	; 0
 eb0:	6f ef       	ldi	r22, 0xFF	; 255
 eb2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_WRITE>
						EEPROM_WRITE(EEPROM_LOCATION4,0xff);
 eb6:	84 e2       	ldi	r24, 0x24	; 36
 eb8:	90 e0       	ldi	r25, 0x00	; 0
 eba:	6f ef       	ldi	r22, 0xFF	; 255
 ebc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_WRITE>
						LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 ec0:	81 e0       	ldi	r24, 0x01	; 1
 ec2:	61 e0       	ldi	r22, 0x01	; 1
 ec4:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
						MOVE_CURSOR_4_BIT(1,1);
 ec8:	81 e0       	ldi	r24, 0x01	; 1
 eca:	61 e0       	ldi	r22, 0x01	; 1
 ecc:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
						DIO_PORT_PIN_WRITE('b',7,PIN_LOW);
 ed0:	82 e6       	ldi	r24, 0x62	; 98
 ed2:	67 e0       	ldi	r22, 0x07	; 7
 ed4:	40 e0       	ldi	r20, 0x00	; 0
 ed6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_PORT_PIN_WRITE>
				DIO_PORT_PIN_WRITE('b',6,PIN_HIGH);
			}/*________________________________*///--->CASE_CORRECT			
	
			else
			{
				tries=tries-1;
 eda:	45 2c       	mov	r4, r5
						EEPROM_WRITE(EEPROM_LOCATION3,0xff);
						EEPROM_WRITE(EEPROM_LOCATION4,0xff);
						LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
						MOVE_CURSOR_4_BIT(1,1);
						DIO_PORT_PIN_WRITE('b',7,PIN_LOW);
						flag=1;
 edc:	24 c0       	rjmp	.+72     	; 0xf26 <main+0x59e>
					}
					else
					{
						LCD_SEND_CMD_FOUR_BIT(0x01,HIGH_NIPPLE);
 ede:	81 e0       	ldi	r24, 0x01	; 1
 ee0:	61 e0       	ldi	r22, 0x01	; 1
 ee2:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_SEND_CMD_FOUR_BIT>
						MOVE_CURSOR_4_BIT(1,5);
 ee6:	81 e0       	ldi	r24, 0x01	; 1
 ee8:	65 e0       	ldi	r22, 0x05	; 5
 eea:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
						LCD_WRITE_STRING_4_BIT("SECURITY");
 eee:	87 e2       	ldi	r24, 0x27	; 39
 ef0:	91 e0       	ldi	r25, 0x01	; 1
 ef2:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
						MOVE_CURSOR_4_BIT(2,6);
 ef6:	82 e0       	ldi	r24, 0x02	; 2
 ef8:	66 e0       	ldi	r22, 0x06	; 6
 efa:	0e 94 a7 04 	call	0x94e	; 0x94e <MOVE_CURSOR_4_BIT>
						LCD_WRITE_STRING_4_BIT("ALARM!");
 efe:	80 e3       	ldi	r24, 0x30	; 48
 f00:	91 e0       	ldi	r25, 0x01	; 1
 f02:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_WRITE_STRING_4_BIT>
						while(1)
						{
						DIO_TOGGLE_PORT_PIN('b',7);
 f06:	82 e6       	ldi	r24, 0x62	; 98
 f08:	67 e0       	ldi	r22, 0x07	; 7
 f0a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_TOGGLE_PORT_PIN>
 f0e:	8f ef       	ldi	r24, 0xFF	; 255
 f10:	91 ee       	ldi	r25, 0xE1	; 225
 f12:	a4 e0       	ldi	r26, 0x04	; 4
 f14:	81 50       	subi	r24, 0x01	; 1
 f16:	90 40       	sbci	r25, 0x00	; 0
 f18:	a0 40       	sbci	r26, 0x00	; 0
 f1a:	e1 f7       	brne	.-8      	; 0xf14 <main+0x58c>
 f1c:	00 c0       	rjmp	.+0      	; 0xf1e <main+0x596>
 f1e:	00 00       	nop
 f20:	f2 cf       	rjmp	.-28     	; 0xf06 <main+0x57e>
				DIO_PORT_PIN_WRITE('b',6,PIN_HIGH);
			}/*________________________________*///--->CASE_CORRECT			
	
			else
			{
				tries=tries-1;
 f22:	00 e0       	ldi	r16, 0x00	; 0
 f24:	63 ce       	rjmp	.-826    	; 0xbec <main+0x264>
 f26:	01 e0       	ldi	r16, 0x01	; 1
 f28:	85 cd       	rjmp	.-1270   	; 0xa34 <main+0xac>

00000f2a <_exit>:
 f2a:	f8 94       	cli

00000f2c <__stop_program>:
 f2c:	ff cf       	rjmp	.-2      	; 0xf2c <__stop_program>
